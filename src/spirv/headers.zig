pub const SourceLanguage = enum(u32) {
    Unknown = @as(u32, 0),
    ESSL = @as(u32, 1),
    GLSL = @as(u32, 2),
    OpenCL_C = @as(u32, 3),
    OpenCL_CPP = @as(u32, 4),
    HLSL = @as(u32, 5),
    CPP_for_OpenCL = @as(u32, 6),
    SYCL = @as(u32, 7),
    HERO_C = @as(u32, 8),
    NZSL = @as(u32, 9),
    WGSL = @as(u32, 10),
    Slang = @as(u32, 11),
    Zig = @as(u32, 12),
};

pub const ExecutionModel = enum(u32) {
    Vertex = @as(u32, 0),
    TessellationControl = @as(u32, 1),
    TessellationEvaluation = @as(u32, 2),
    Geometry = @as(u32, 3),
    Fragment = @as(u32, 4),
    GLCompute = @as(u32, 5),
    Kernel = @as(u32, 6),
    TaskNV = @as(u32, 5267),
    MeshNV = @as(u32, 5268),
    RayGenerationKHR = @as(u32, 5313),
    IntersectionKHR = @as(u32, 5314),
    AnyHitKHR = @as(u32, 5315),
    ClosestHitKHR = @as(u32, 5316),
    MissKHR = @as(u32, 5317),
    CallableKHR = @as(u32, 5318),
    TaskEXT = @as(u32, 5364),
    MeshEXT = @as(u32, 5365),
};

pub const AddressingModel = enum(u32) {
    Logical = @as(u32, 0),
    Physical32 = @as(u32, 1),
    Physical64 = @as(u32, 2),
    PhysicalStorageBuffer64 = @as(u32, 5348),
};

pub const MemoryModel = enum(u32) {
    Simple = @as(u32, 0),
    GLSL450 = @as(u32, 1),
    OpenCL = @as(u32, 2),
    Vulkan = @as(u32, 3),
};

pub const ExecutionMode = enum(u32) {
    Invocations = @as(u32, 0),
    SpacingEqual = @as(u32, 1),
    SpacingFractionalEven = @as(u32, 2),
    SpacingFractionalOdd = @as(u32, 3),
    VertexOrderCw = @as(u32, 4),
    VertexOrderCcw = @as(u32, 5),
    PixelCenterInteger = @as(u32, 6),
    OriginUpperLeft = @as(u32, 7),
    OriginLowerLeft = @as(u32, 8),
    EarlyFragmentTests = @as(u32, 9),
    PointMode = @as(u32, 10),
    Xfb = @as(u32, 11),
    DepthReplacing = @as(u32, 12),
    DepthGreater = @as(u32, 14),
    DepthLess = @as(u32, 15),
    DepthUnchanged = @as(u32, 16),
    LocalSize = @as(u32, 17),
    LocalSizeHint = @as(u32, 18),
    InputPoints = @as(u32, 19),
    InputLines = @as(u32, 20),
    InputLinesAdjacency = @as(u32, 21),
    Triangles = @as(u32, 22),
    InputTrianglesAdjacency = @as(u32, 23),
    Quads = @as(u32, 24),
    Isolines = @as(u32, 25),
    OutputVertices = @as(u32, 26),
    OutputPoints = @as(u32, 27),
    OutputLineStrip = @as(u32, 28),
    OutputTriangleStrip = @as(u32, 29),
    VecTypeHint = @as(u32, 30),
    ContractionOff = @as(u32, 31),
    Initializer = @as(u32, 33),
    Finalizer = @as(u32, 34),
    SubgroupSize = @as(u32, 35),
    SubgroupsPerWorkgroup = @as(u32, 36),
    SubgroupsPerWorkgroupId = @as(u32, 37),
    LocalSizeId = @as(u32, 38),
    LocalSizeHintId = @as(u32, 39),
    NonCoherentColorAttachmentReadEXT = @as(u32, 4169),
    NonCoherentDepthAttachmentReadEXT = @as(u32, 4170),
    NonCoherentStencilAttachmentReadEXT = @as(u32, 4171),
    SubgroupUniformControlFlowKHR = @as(u32, 4421),
    PostDepthCoverage = @as(u32, 4446),
    DenormPreserve = @as(u32, 4459),
    DenormFlushToZero = @as(u32, 4460),
    SignedZeroInfNanPreserve = @as(u32, 4461),
    RoundingModeRTE = @as(u32, 4462),
    RoundingModeRTZ = @as(u32, 4463),
    EarlyAndLateFragmentTestsAMD = @as(u32, 5017),
    StencilRefReplacingEXT = @as(u32, 5027),
    CoalescingAMDX = @as(u32, 5069),
    MaxNodeRecursionAMDX = @as(u32, 5071),
    StaticNumWorkgroupsAMDX = @as(u32, 5072),
    ShaderIndexAMDX = @as(u32, 5073),
    MaxNumWorkgroupsAMDX = @as(u32, 5077),
    StencilRefUnchangedFrontAMD = @as(u32, 5079),
    StencilRefGreaterFrontAMD = @as(u32, 5080),
    StencilRefLessFrontAMD = @as(u32, 5081),
    StencilRefUnchangedBackAMD = @as(u32, 5082),
    StencilRefGreaterBackAMD = @as(u32, 5083),
    StencilRefLessBackAMD = @as(u32, 5084),
    QuadDerivativesKHR = @as(u32, 5088),
    RequireFullQuadsKHR = @as(u32, 5089),
    OutputLinesEXT = @as(u32, 5269),
    OutputPrimitivesEXT = @as(u32, 5270),
    DerivativeGroupQuadsNV = @as(u32, 5289),
    DerivativeGroupLinearNV = @as(u32, 5290),
    OutputTrianglesEXT = @as(u32, 5298),
    PixelInterlockOrderedEXT = @as(u32, 5366),
    PixelInterlockUnorderedEXT = @as(u32, 5367),
    SampleInterlockOrderedEXT = @as(u32, 5368),
    SampleInterlockUnorderedEXT = @as(u32, 5369),
    ShadingRateInterlockOrderedEXT = @as(u32, 5370),
    ShadingRateInterlockUnorderedEXT = @as(u32, 5371),
    SharedLocalMemorySizeINTEL = @as(u32, 5618),
    RoundingModeRTPINTEL = @as(u32, 5620),
    RoundingModeRTNINTEL = @as(u32, 5621),
    FloatingPointModeALTINTEL = @as(u32, 5622),
    FloatingPointModeIEEEINTEL = @as(u32, 5623),
    MaxWorkgroupSizeINTEL = @as(u32, 5893),
    MaxWorkDimINTEL = @as(u32, 5894),
    NoGlobalOffsetINTEL = @as(u32, 5895),
    NumSIMDWorkitemsINTEL = @as(u32, 5896),
    SchedulerTargetFmaxMhzINTEL = @as(u32, 5903),
    MaximallyReconvergesKHR = @as(u32, 6023),
    FPFastMathDefault = @as(u32, 6028),
    StreamingInterfaceINTEL = @as(u32, 6154),
    RegisterMapInterfaceINTEL = @as(u32, 6160),
    NamedBarrierCountINTEL = @as(u32, 6417),
    MaximumRegistersINTEL = @as(u32, 6461),
    MaximumRegistersIdINTEL = @as(u32, 6462),
    NamedMaximumRegistersINTEL = @as(u32, 6463),
};

pub const StorageClass = enum(u32) {
    UniformConstant = @as(u32, 0),
    Input = @as(u32, 1),
    Uniform = @as(u32, 2),
    Output = @as(u32, 3),
    Workgroup = @as(u32, 4),
    CrossWorkgroup = @as(u32, 5),
    Private = @as(u32, 6),
    Function = @as(u32, 7),
    Generic = @as(u32, 8),
    PushConstant = @as(u32, 9),
    AtomicCounter = @as(u32, 10),
    Image = @as(u32, 11),
    StorageBuffer = @as(u32, 12),
    TileImageEXT = @as(u32, 4172),
    NodePayloadAMDX = @as(u32, 5068),
    NodeOutputPayloadAMDX = @as(u32, 5076),
    CallableDataKHR = @as(u32, 5328),
    IncomingCallableDataKHR = @as(u32, 5329),
    RayPayloadKHR = @as(u32, 5338),
    HitAttributeKHR = @as(u32, 5339),
    IncomingRayPayloadKHR = @as(u32, 5342),
    ShaderRecordBufferKHR = @as(u32, 5343),
    PhysicalStorageBuffer = @as(u32, 5349),
    HitObjectAttributeNV = @as(u32, 5385),
    TaskPayloadWorkgroupEXT = @as(u32, 5402),
    CodeSectionINTEL = @as(u32, 5605),
    DeviceOnlyINTEL = @as(u32, 5936),
    HostOnlyINTEL = @as(u32, 5937),
};

pub const Dim = enum(u32) {
    Dim1D = @as(u32, 0),
    Dim2D = @as(u32, 1),
    Dim3D = @as(u32, 2),
    Cube = @as(u32, 3),
    Rect = @as(u32, 4),
    Buffer = @as(u32, 5),
    SubpassData = @as(u32, 6),
    TileImageDataEXT = @as(u32, 4173),
};

pub const SamplerAddressingMode = enum(u32) {
    None = @as(u32, 0),
    ClampToEdge = @as(u32, 1),
    Clamp = @as(u32, 2),
    Repeat = @as(u32, 3),
    RepeatMirrored = @as(u32, 4),
};

pub const SamplerFilterMode = enum(u32) {
    Nearest = @as(u32, 0),
    Linear = @as(u32, 1),
};

pub const ImageFormat = enum(u32) {
    Unknown = @as(u32, 0),
    Rgba32f = @as(u32, 1),
    Rgba16f = @as(u32, 2),
    R32f = @as(u32, 3),
    Rgba8 = @as(u32, 4),
    Rgba8Snorm = @as(u32, 5),
    Rg32f = @as(u32, 6),
    Rg16f = @as(u32, 7),
    R11fG11fB10f = @as(u32, 8),
    R16f = @as(u32, 9),
    Rgba16 = @as(u32, 10),
    Rgb10A2 = @as(u32, 11),
    Rg16 = @as(u32, 12),
    Rg8 = @as(u32, 13),
    R16 = @as(u32, 14),
    R8 = @as(u32, 15),
    Rgba16Snorm = @as(u32, 16),
    Rg16Snorm = @as(u32, 17),
    Rg8Snorm = @as(u32, 18),
    R16Snorm = @as(u32, 19),
    R8Snorm = @as(u32, 20),
    Rgba32i = @as(u32, 21),
    Rgba16i = @as(u32, 22),
    Rgba8i = @as(u32, 23),
    R32i = @as(u32, 24),
    Rg32i = @as(u32, 25),
    Rg16i = @as(u32, 26),
    Rg8i = @as(u32, 27),
    R16i = @as(u32, 28),
    R8i = @as(u32, 29),
    Rgba32ui = @as(u32, 30),
    Rgba16ui = @as(u32, 31),
    Rgba8ui = @as(u32, 32),
    R32ui = @as(u32, 33),
    Rgb10a2ui = @as(u32, 34),
    Rg32ui = @as(u32, 35),
    Rg16ui = @as(u32, 36),
    Rg8ui = @as(u32, 37),
    R16ui = @as(u32, 38),
    R8ui = @as(u32, 39),
    R64ui = @as(u32, 40),
    R64i = @as(u32, 41),
};

pub const ImageChannelOrder = enum(u32) {
    R = @as(u32, 0),
    A = @as(u32, 1),
    RG = @as(u32, 2),
    RA = @as(u32, 3),
    RGB = @as(u32, 4),
    RGBA = @as(u32, 5),
    BGRA = @as(u32, 6),
    ARGB = @as(u32, 7),
    Intensity = @as(u32, 8),
    Luminance = @as(u32, 9),
    Rx = @as(u32, 10),
    RGx = @as(u32, 11),
    RGBx = @as(u32, 12),
    Depth = @as(u32, 13),
    DepthStencil = @as(u32, 14),
    sRGB = @as(u32, 15),
    sRGBx = @as(u32, 16),
    sRGBA = @as(u32, 17),
    sBGRA = @as(u32, 18),
    ABGR = @as(u32, 19),
};

pub const ImageChannelDataType = enum(u32) {
    SnormInt8 = @as(u32, 0),
    SnormInt16 = @as(u32, 1),
    UnormInt8 = @as(u32, 2),
    UnormInt16 = @as(u32, 3),
    UnormShort565 = @as(u32, 4),
    UnormShort555 = @as(u32, 5),
    UnormInt101010 = @as(u32, 6),
    SignedInt8 = @as(u32, 7),
    SignedInt16 = @as(u32, 8),
    SignedInt32 = @as(u32, 9),
    UnsignedInt8 = @as(u32, 10),
    UnsignedInt16 = @as(u32, 11),
    UnsignedInt32 = @as(u32, 12),
    HalfFloat = @as(u32, 13),
    Float = @as(u32, 14),
    UnormInt24 = @as(u32, 15),
    UnormInt101010_2 = @as(u32, 16),
    UnsignedIntRaw10EXT = @as(u32, 19),
    UnsignedIntRaw12EXT = @as(u32, 20),
};

pub const ImageOperands = enum(u32) {
    Bias = @as(u32, 1 << 0),
    Lod = @as(u32, 1 << 1),
    Grad = @as(u32, 1 << 2),
    ConstOffset = @as(u32, 1 << 3),
    Offset = @as(u32, 1 << 4),
    ConstOffsets = @as(u32, 1 << 5),
    Sample = @as(u32, 1 << 6),
    MinLod = @as(u32, 1 << 7),
    MakeTexelAvailable = @as(u32, 1 << 8),
    MakeTexelVisible = @as(u32, 1 << 9),
    NonPrivateTexel = @as(u32, 1 << 10),
    VolatileTexel = @as(u32, 1 << 11),
    SignExtend = @as(u32, 1 << 12),
    ZeroExtend = @as(u32, 1 << 13),
    Nontemporal = @as(u32, 1 << 14),
    Offsets = @as(u32, 1 << 16),
};

pub const FPFastMathMode = enum(u32) {
    NotNaN = @as(u32, 1 << 0),
    NotInf = @as(u32, 1 << 1),
    NSZ = @as(u32, 1 << 2),
    AllowRecip = @as(u32, 1 << 3),
    Fast = @as(u32, 1 << 4),
    AllowContract = @as(u32, 1 << 16),
    AllowReassoc = @as(u32, 1 << 17),
    AllowTransform = @as(u32, 1 << 18),
};

pub const FPRoundingMode = enum(u32) {
    RTE = @as(u32, 0),
    RTZ = @as(u32, 1),
    RTP = @as(u32, 2),
    RTN = @as(u32, 3),
};

pub const LinkageType = enum(u32) {
    Export = @as(u32, 0),
    Import = @as(u32, 1),
    LinkOnceODR = @as(u32, 2),
};

pub const AccessQualifier = enum(u32) {
    ReadOnly = @as(u32, 0),
    WriteOnly = @as(u32, 1),
    ReadWrite = @as(u32, 2),
};

pub const FunctionParameterAttribute = enum(u32) {
    Zext = @as(u32, 0),
    Sext = @as(u32, 1),
    ByVal = @as(u32, 2),
    Sret = @as(u32, 3),
    NoAlias = @as(u32, 4),
    NoCapture = @as(u32, 5),
    NoWrite = @as(u32, 6),
    NoReadWrite = @as(u32, 7),
    RuntimeAlignedINTEL = @as(u32, 5940),
};

pub const Decoration = enum(u32) {
    RelaxedPrecision = @as(u32, 0),
    SpecId = @as(u32, 1),
    Block = @as(u32, 2),
    BufferBlock = @as(u32, 3),
    RowMajor = @as(u32, 4),
    ColMajor = @as(u32, 5),
    ArrayStride = @as(u32, 6),
    MatrixStride = @as(u32, 7),
    GLSLShared = @as(u32, 8),
    GLSLPacked = @as(u32, 9),
    CPacked = @as(u32, 10),
    BuiltIn = @as(u32, 11),
    NoPerspective = @as(u32, 13),
    Flat = @as(u32, 14),
    Patch = @as(u32, 15),
    Centroid = @as(u32, 16),
    Sample = @as(u32, 17),
    Invariant = @as(u32, 18),
    Restrict = @as(u32, 19),
    Aliased = @as(u32, 20),
    Volatile = @as(u32, 21),
    Constant = @as(u32, 22),
    Coherent = @as(u32, 23),
    NonWritable = @as(u32, 24),
    NonReadable = @as(u32, 25),
    Uniform = @as(u32, 26),
    UniformId = @as(u32, 27),
    SaturatedConversion = @as(u32, 28),
    Stream = @as(u32, 29),
    Location = @as(u32, 30),
    Component = @as(u32, 31),
    Index = @as(u32, 32),
    Binding = @as(u32, 33),
    DescriptorSet = @as(u32, 34),
    Offset = @as(u32, 35),
    XfbBuffer = @as(u32, 36),
    XfbStride = @as(u32, 37),
    FuncParamAttr = @as(u32, 38),
    FPRoundingMode = @as(u32, 39),
    FPFastMathMode = @as(u32, 40),
    LinkageAttributes = @as(u32, 41),
    NoContraction = @as(u32, 42),
    InputAttachmentIndex = @as(u32, 43),
    Alignment = @as(u32, 44),
    MaxByteOffset = @as(u32, 45),
    AlignmentId = @as(u32, 46),
    MaxByteOffsetId = @as(u32, 47),
    NoSignedWrap = @as(u32, 4469),
    NoUnsignedWrap = @as(u32, 4470),
    WeightTextureQCOM = @as(u32, 4487),
    BlockMatchTextureQCOM = @as(u32, 4488),
    BlockMatchSamplerQCOM = @as(u32, 4499),
    ExplicitInterpAMD = @as(u32, 4999),
    NodeSharesPayloadLimitsWithAMDX = @as(u32, 5019),
    NodeMaxPayloadsAMDX = @as(u32, 5020),
    TrackFinishWritingAMDX = @as(u32, 5078),
    PayloadNodeNameAMDX = @as(u32, 5091),
    OverrideCoverageNV = @as(u32, 5248),
    PassthroughNV = @as(u32, 5250),
    ViewportRelativeNV = @as(u32, 5252),
    SecondaryViewportRelativeNV = @as(u32, 5256),
    PerPrimitiveEXT = @as(u32, 5271),
    PerViewNV = @as(u32, 5272),
    PerTaskNV = @as(u32, 5273),
    PerVertexKHR = @as(u32, 5285),
    NonUniform = @as(u32, 5300),
    RestrictPointer = @as(u32, 5355),
    AliasedPointer = @as(u32, 5356),
    HitObjectShaderRecordBufferNV = @as(u32, 5386),
    BindlessSamplerNV = @as(u32, 5398),
    BindlessImageNV = @as(u32, 5399),
    BoundSamplerNV = @as(u32, 5400),
    BoundImageNV = @as(u32, 5401),
    SIMTCallINTEL = @as(u32, 5599),
    ReferencedIndirectlyINTEL = @as(u32, 5602),
    ClobberINTEL = @as(u32, 5607),
    SideEffectsINTEL = @as(u32, 5608),
    VectorComputeVariableINTEL = @as(u32, 5624),
    FuncParamIOKindINTEL = @as(u32, 5625),
    VectorComputeFunctionINTEL = @as(u32, 5626),
    StackCallINTEL = @as(u32, 5627),
    GlobalVariableOffsetINTEL = @as(u32, 5628),
    CounterBuffer = @as(u32, 5634),
    HlslSemanticGOOGLE = @as(u32, 5635),
    UserTypeGOOGLE = @as(u32, 5636),
    FunctionRoundingModeINTEL = @as(u32, 5822),
    FunctionDenormModeINTEL = @as(u32, 5823),
    RegisterINTEL = @as(u32, 5825),
    MemoryINTEL = @as(u32, 5826),
    NumbanksINTEL = @as(u32, 5827),
    BankwidthINTEL = @as(u32, 5828),
    MaxPrivateCopiesINTEL = @as(u32, 5829),
    SinglepumpINTEL = @as(u32, 5830),
    DoublepumpINTEL = @as(u32, 5831),
    MaxReplicatesINTEL = @as(u32, 5832),
    SimpleDualPortINTEL = @as(u32, 5833),
    MergeINTEL = @as(u32, 5834),
    BankBitsINTEL = @as(u32, 5835),
    ForcePow2DepthINTEL = @as(u32, 5836),
    StridesizeINTEL = @as(u32, 5883),
    WordsizeINTEL = @as(u32, 5884),
    TrueDualPortINTEL = @as(u32, 5885),
    BurstCoalesceINTEL = @as(u32, 5899),
    CacheSizeINTEL = @as(u32, 5900),
    DontStaticallyCoalesceINTEL = @as(u32, 5901),
    PrefetchINTEL = @as(u32, 5902),
    StallEnableINTEL = @as(u32, 5905),
    FuseLoopsInFunctionINTEL = @as(u32, 5907),
    MathOpDSPModeINTEL = @as(u32, 5909),
    AliasScopeINTEL = @as(u32, 5914),
    NoAliasINTEL = @as(u32, 5915),
    InitiationIntervalINTEL = @as(u32, 5917),
    MaxConcurrencyINTEL = @as(u32, 5918),
    PipelineEnableINTEL = @as(u32, 5919),
    BufferLocationINTEL = @as(u32, 5921),
    IOPipeStorageINTEL = @as(u32, 5944),
    FunctionFloatingPointModeINTEL = @as(u32, 6080),
    SingleElementVectorINTEL = @as(u32, 6085),
    VectorComputeCallableFunctionINTEL = @as(u32, 6087),
    MediaBlockIOINTEL = @as(u32, 6140),
    StallFreeINTEL = @as(u32, 6151),
    FPMaxErrorDecorationINTEL = @as(u32, 6170),
    LatencyControlLabelINTEL = @as(u32, 6172),
    LatencyControlConstraintINTEL = @as(u32, 6173),
    ConduitKernelArgumentINTEL = @as(u32, 6175),
    RegisterMapKernelArgumentINTEL = @as(u32, 6176),
    MMHostInterfaceAddressWidthINTEL = @as(u32, 6177),
    MMHostInterfaceDataWidthINTEL = @as(u32, 6178),
    MMHostInterfaceLatencyINTEL = @as(u32, 6179),
    MMHostInterfaceReadWriteModeINTEL = @as(u32, 6180),
    MMHostInterfaceMaxBurstINTEL = @as(u32, 6181),
    MMHostInterfaceWaitRequestINTEL = @as(u32, 6182),
    StableKernelArgumentINTEL = @as(u32, 6183),
    HostAccessINTEL = @as(u32, 6188),
    InitModeINTEL = @as(u32, 6190),
    ImplementInRegisterMapINTEL = @as(u32, 6191),
    CacheControlLoadINTEL = @as(u32, 6442),
    CacheControlStoreINTEL = @as(u32, 6443),
};

pub const BuiltIn = enum(u32) {
    Position = @as(u32, 0),
    PointSize = @as(u32, 1),
    ClipDistance = @as(u32, 3),
    CullDistance = @as(u32, 4),
    VertexId = @as(u32, 5),
    InstanceId = @as(u32, 6),
    PrimitiveId = @as(u32, 7),
    InvocationId = @as(u32, 8),
    Layer = @as(u32, 9),
    ViewportIndex = @as(u32, 10),
    TessLevelOuter = @as(u32, 11),
    TessLevelInner = @as(u32, 12),
    TessCoord = @as(u32, 13),
    PatchVertices = @as(u32, 14),
    FragCoord = @as(u32, 15),
    PointCoord = @as(u32, 16),
    FrontFacing = @as(u32, 17),
    SampleId = @as(u32, 18),
    SamplePosition = @as(u32, 19),
    SampleMask = @as(u32, 20),
    FragDepth = @as(u32, 22),
    HelperInvocation = @as(u32, 23),
    NumWorkgroups = @as(u32, 24),
    WorkgroupSize = @as(u32, 25),
    WorkgroupId = @as(u32, 26),
    LocalInvocationId = @as(u32, 27),
    GlobalInvocationId = @as(u32, 28),
    LocalInvocationIndex = @as(u32, 29),
    WorkDim = @as(u32, 30),
    GlobalSize = @as(u32, 31),
    EnqueuedWorkgroupSize = @as(u32, 32),
    GlobalOffset = @as(u32, 33),
    GlobalLinearId = @as(u32, 34),
    SubgroupSize = @as(u32, 36),
    SubgroupMaxSize = @as(u32, 37),
    NumSubgroups = @as(u32, 38),
    NumEnqueuedSubgroups = @as(u32, 39),
    SubgroupId = @as(u32, 40),
    SubgroupLocalInvocationId = @as(u32, 41),
    VertexIndex = @as(u32, 42),
    InstanceIndex = @as(u32, 43),
    CoreIDARM = @as(u32, 4160),
    CoreCountARM = @as(u32, 4161),
    CoreMaxIDARM = @as(u32, 4162),
    WarpIDARM = @as(u32, 4163),
    WarpMaxIDARM = @as(u32, 4164),
    SubgroupEqMask = @as(u32, 4416),
    SubgroupGeMask = @as(u32, 4417),
    SubgroupGtMask = @as(u32, 4418),
    SubgroupLeMask = @as(u32, 4419),
    SubgroupLtMask = @as(u32, 4420),
    BaseVertex = @as(u32, 4424),
    BaseInstance = @as(u32, 4425),
    DrawIndex = @as(u32, 4426),
    PrimitiveShadingRateKHR = @as(u32, 4432),
    DeviceIndex = @as(u32, 4438),
    ViewIndex = @as(u32, 4440),
    ShadingRateKHR = @as(u32, 4444),
    BaryCoordNoPerspAMD = @as(u32, 4992),
    BaryCoordNoPerspCentroidAMD = @as(u32, 4993),
    BaryCoordNoPerspSampleAMD = @as(u32, 4994),
    BaryCoordSmoothAMD = @as(u32, 4995),
    BaryCoordSmoothCentroidAMD = @as(u32, 4996),
    BaryCoordSmoothSampleAMD = @as(u32, 4997),
    BaryCoordPullModelAMD = @as(u32, 4998),
    FragStencilRefEXT = @as(u32, 5014),
    CoalescedInputCountAMDX = @as(u32, 5021),
    ShaderIndexAMDX = @as(u32, 5073),
    ViewportMaskNV = @as(u32, 5253),
    SecondaryPositionNV = @as(u32, 5257),
    SecondaryViewportMaskNV = @as(u32, 5258),
    PositionPerViewNV = @as(u32, 5261),
    ViewportMaskPerViewNV = @as(u32, 5262),
    FullyCoveredEXT = @as(u32, 5264),
    TaskCountNV = @as(u32, 5274),
    PrimitiveCountNV = @as(u32, 5275),
    PrimitiveIndicesNV = @as(u32, 5276),
    ClipDistancePerViewNV = @as(u32, 5277),
    CullDistancePerViewNV = @as(u32, 5278),
    LayerPerViewNV = @as(u32, 5279),
    MeshViewCountNV = @as(u32, 5280),
    MeshViewIndicesNV = @as(u32, 5281),
    BaryCoordKHR = @as(u32, 5286),
    BaryCoordNoPerspKHR = @as(u32, 5287),
    FragSizeEXT = @as(u32, 5292),
    FragInvocationCountEXT = @as(u32, 5293),
    PrimitivePointIndicesEXT = @as(u32, 5294),
    PrimitiveLineIndicesEXT = @as(u32, 5295),
    PrimitiveTriangleIndicesEXT = @as(u32, 5296),
    CullPrimitiveEXT = @as(u32, 5299),
    LaunchIdKHR = @as(u32, 5319),
    LaunchSizeKHR = @as(u32, 5320),
    WorldRayOriginKHR = @as(u32, 5321),
    WorldRayDirectionKHR = @as(u32, 5322),
    ObjectRayOriginKHR = @as(u32, 5323),
    ObjectRayDirectionKHR = @as(u32, 5324),
    RayTminKHR = @as(u32, 5325),
    RayTmaxKHR = @as(u32, 5326),
    InstanceCustomIndexKHR = @as(u32, 5327),
    ObjectToWorldKHR = @as(u32, 5330),
    WorldToObjectKHR = @as(u32, 5331),
    HitTNV = @as(u32, 5332),
    HitKindKHR = @as(u32, 5333),
    CurrentRayTimeNV = @as(u32, 5334),
    HitTriangleVertexPositionsKHR = @as(u32, 5335),
    HitMicroTriangleVertexPositionsNV = @as(u32, 5337),
    HitMicroTriangleVertexBarycentricsNV = @as(u32, 5344),
    IncomingRayFlagsKHR = @as(u32, 5351),
    RayGeometryIndexKHR = @as(u32, 5352),
    WarpsPerSMNV = @as(u32, 5374),
    SMCountNV = @as(u32, 5375),
    WarpIDNV = @as(u32, 5376),
    SMIDNV = @as(u32, 5377),
    HitKindFrontFacingMicroTriangleNV = @as(u32, 5405),
    HitKindBackFacingMicroTriangleNV = @as(u32, 5406),
    CullMaskKHR = @as(u32, 6021),
};

pub const SelectionControl = enum(u32) {
    Flatten = @as(u32, 1 << 0),
    DontFlatten = @as(u32, 1 << 1),
};

pub const LoopControl = enum(u32) {
    Unroll = @as(u32, 1 << 0),
    DontUnroll = @as(u32, 1 << 1),
    DependencyInfinite = @as(u32, 1 << 2),
    DependencyLength = @as(u32, 1 << 3),
    MinIterations = @as(u32, 1 << 4),
    MaxIterations = @as(u32, 1 << 5),
    IterationMultiple = @as(u32, 1 << 6),
    PeelCount = @as(u32, 1 << 7),
    PartialCount = @as(u32, 1 << 8),
    InitiationIntervalINTEL = @as(u32, 1 << 16),
    MaxConcurrencyINTEL = @as(u32, 1 << 17),
    DependencyArrayINTEL = @as(u32, 1 << 18),
    PipelineEnableINTEL = @as(u32, 1 << 19),
    LoopCoalesceINTEL = @as(u32, 1 << 20),
    MaxInterleavingINTEL = @as(u32, 1 << 21),
    SpeculatedIterationsINTEL = @as(u32, 1 << 22),
    NoFusionINTEL = @as(u32, 1 << 23),
    LoopCountINTEL = @as(u32, 1 << 24),
    MaxReinvocationDelayINTEL = @as(u32, 1 << 25),
};

pub const FunctionControl = enum(u32) {
    Inline = @as(u32, 1 << 0),
    DontInline = @as(u32, 1 << 1),
    Pure = @as(u32, 1 << 2),
    Const = @as(u32, 1 << 3),
    OptNoneINTEL = @as(u32, 1 << 16),
};

pub const MemorySemantics = enum(u32) {
    Acquire = @as(u32, 1 << 1),
    Release = @as(u32, 1 << 2),
    AcquireRelease = @as(u32, 1 << 3),
    SequentiallyConsistent = @as(u32, 1 << 4),
    UniformMemory = @as(u32, 1 << 6),
    SubgroupMemory = @as(u32, 1 << 7),
    WorkgroupMemory = @as(u32, 1 << 8),
    CrossWorkgroupMemory = @as(u32, 1 << 9),
    AtomicCounterMemory = @as(u32, 1 << 10),
    ImageMemory = @as(u32, 1 << 11),
    OutputMemory = @as(u32, 1 << 12),
    MakeAvailable = @as(u32, 1 << 13),
    MakeVisible = @as(u32, 1 << 14),
    Volatile = @as(u32, 1 << 15),
};

pub const MemoryAccess = enum(u32) {
    Volatile = @as(u32, 1 << 0),
    Aligned = @as(u32, 1 << 1),
    Nontemporal = @as(u32, 1 << 2),
    MakePointerAvailable = @as(u32, 1 << 3),
    MakePointerVisible = @as(u32, 1 << 4),
    NonPrivatePointer = @as(u32, 1 << 5),
    AliasScopeINTELMask = @as(u32, 1 << 16),
    NoAliasINTELMask = @as(u32, 1 << 17),
};

pub const Scope = enum(u32) {
    CrossDevice = @as(u32, 0),
    Device = @as(u32, 1),
    Workgroup = @as(u32, 2),
    Subgroup = @as(u32, 3),
    Invocation = @as(u32, 4),
    QueueFamily = @as(u32, 5),
    ShaderCallKHR = @as(u32, 6),
};

pub const GroupOperation = enum(u32) {
    Reduce = @as(u32, 0),
    InclusiveScan = @as(u32, 1),
    ExclusiveScan = @as(u32, 2),
    ClusteredReduce = @as(u32, 3),
    PartitionedReduceNV = @as(u32, 6),
    PartitionedInclusiveScanNV = @as(u32, 7),
    PartitionedExclusiveScanNV = @as(u32, 8),
};

pub const KernelEnqueueFlags = enum(u32) {
    NoWait = @as(u32, 0),
    WaitKernel = @as(u32, 1),
    WaitWorkGroup = @as(u32, 2),
};

pub const KernelProfilingInfo = enum(u32) {
    CmdExecTime = @as(u32, 1 << 0),
};

pub const Capability = enum(u32) {
    Matrix = @as(u32, 0),
    Shader = @as(u32, 1),
    Geometry = @as(u32, 2),
    Tessellation = @as(u32, 3),
    Addresses = @as(u32, 4),
    Linkage = @as(u32, 5),
    Kernel = @as(u32, 6),
    Vector16 = @as(u32, 7),
    Float16Buffer = @as(u32, 8),
    Float16 = @as(u32, 9),
    Float64 = @as(u32, 10),
    Int64 = @as(u32, 11),
    Int64Atomics = @as(u32, 12),
    ImageBasic = @as(u32, 13),
    ImageReadWrite = @as(u32, 14),
    ImageMipmap = @as(u32, 15),
    Pipes = @as(u32, 17),
    Groups = @as(u32, 18),
    DeviceEnqueue = @as(u32, 19),
    LiteralSampler = @as(u32, 20),
    AtomicStorage = @as(u32, 21),
    Int16 = @as(u32, 22),
    TessellationPointSize = @as(u32, 23),
    GeometryPointSize = @as(u32, 24),
    ImageGatherExtended = @as(u32, 25),
    StorageImageMultisample = @as(u32, 27),
    UniformBufferArrayDynamicIndexing = @as(u32, 28),
    SampledImageArrayDynamicIndexing = @as(u32, 29),
    StorageBufferArrayDynamicIndexing = @as(u32, 30),
    StorageImageArrayDynamicIndexing = @as(u32, 31),
    ClipDistance = @as(u32, 32),
    CullDistance = @as(u32, 33),
    ImageCubeArray = @as(u32, 34),
    SampleRateShading = @as(u32, 35),
    ImageRect = @as(u32, 36),
    SampledRect = @as(u32, 37),
    GenericPointer = @as(u32, 38),
    Int8 = @as(u32, 39),
    InputAttachment = @as(u32, 40),
    SparseResidency = @as(u32, 41),
    MinLod = @as(u32, 42),
    Sampled1D = @as(u32, 43),
    Image1D = @as(u32, 44),
    SampledCubeArray = @as(u32, 45),
    SampledBuffer = @as(u32, 46),
    ImageBuffer = @as(u32, 47),
    ImageMSArray = @as(u32, 48),
    StorageImageExtendedFormats = @as(u32, 49),
    ImageQuery = @as(u32, 50),
    DerivativeControl = @as(u32, 51),
    InterpolationFunction = @as(u32, 52),
    TransformFeedback = @as(u32, 53),
    GeometryStreams = @as(u32, 54),
    StorageImageReadWithoutFormat = @as(u32, 55),
    StorageImageWriteWithoutFormat = @as(u32, 56),
    MultiViewport = @as(u32, 57),
    SubgroupDispatch = @as(u32, 58),
    NamedBarrier = @as(u32, 59),
    PipeStorage = @as(u32, 60),
    GroupNonUniform = @as(u32, 61),
    GroupNonUniformVote = @as(u32, 62),
    GroupNonUniformArithmetic = @as(u32, 63),
    GroupNonUniformBallot = @as(u32, 64),
    GroupNonUniformShuffle = @as(u32, 65),
    GroupNonUniformShuffleRelative = @as(u32, 66),
    GroupNonUniformClustered = @as(u32, 67),
    GroupNonUniformQuad = @as(u32, 68),
    ShaderLayer = @as(u32, 69),
    ShaderViewportIndex = @as(u32, 70),
    UniformDecoration = @as(u32, 71),
    CoreBuiltinsARM = @as(u32, 4165),
    TileImageColorReadAccessEXT = @as(u32, 4166),
    TileImageDepthReadAccessEXT = @as(u32, 4167),
    TileImageStencilReadAccessEXT = @as(u32, 4168),
    CooperativeMatrixLayoutsARM = @as(u32, 4201),
    FragmentShadingRateKHR = @as(u32, 4422),
    SubgroupBallotKHR = @as(u32, 4423),
    DrawParameters = @as(u32, 4427),
    WorkgroupMemoryExplicitLayoutKHR = @as(u32, 4428),
    WorkgroupMemoryExplicitLayout8BitAccessKHR = @as(u32, 4429),
    WorkgroupMemoryExplicitLayout16BitAccessKHR = @as(u32, 4430),
    SubgroupVoteKHR = @as(u32, 4431),
    StorageBuffer16BitAccess = @as(u32, 4433),
    StorageUniform16 = @as(u32, 4434),
    StoragePushConstant16 = @as(u32, 4435),
    StorageInputOutput16 = @as(u32, 4436),
    DeviceGroup = @as(u32, 4437),
    MultiView = @as(u32, 4439),
    VariablePointersStorageBuffer = @as(u32, 4441),
    VariablePointers = @as(u32, 4442),
    AtomicStorageOps = @as(u32, 4445),
    SampleMaskPostDepthCoverage = @as(u32, 4447),
    StorageBuffer8BitAccess = @as(u32, 4448),
    UniformAndStorageBuffer8BitAccess = @as(u32, 4449),
    StoragePushConstant8 = @as(u32, 4450),
    DenormPreserve = @as(u32, 4464),
    DenormFlushToZero = @as(u32, 4465),
    SignedZeroInfNanPreserve = @as(u32, 4466),
    RoundingModeRTE = @as(u32, 4467),
    RoundingModeRTZ = @as(u32, 4468),
    RayQueryProvisionalKHR = @as(u32, 4471),
    RayQueryKHR = @as(u32, 4472),
    RayTraversalPrimitiveCullingKHR = @as(u32, 4478),
    RayTracingKHR = @as(u32, 4479),
    TextureSampleWeightedQCOM = @as(u32, 4484),
    TextureBoxFilterQCOM = @as(u32, 4485),
    TextureBlockMatchQCOM = @as(u32, 4486),
    TextureBlockMatch2QCOM = @as(u32, 4498),
    Float16ImageAMD = @as(u32, 5008),
    ImageGatherBiasLodAMD = @as(u32, 5009),
    FragmentMaskAMD = @as(u32, 5010),
    StencilExportEXT = @as(u32, 5013),
    ImageReadWriteLodAMD = @as(u32, 5015),
    Int64ImageEXT = @as(u32, 5016),
    ShaderClockKHR = @as(u32, 5055),
    ShaderEnqueueAMDX = @as(u32, 5067),
    QuadControlKHR = @as(u32, 5087),
    SampleMaskOverrideCoverageNV = @as(u32, 5249),
    GeometryShaderPassthroughNV = @as(u32, 5251),
    ShaderViewportIndexLayerEXT = @as(u32, 5254),
    ShaderViewportMaskNV = @as(u32, 5255),
    ShaderStereoViewNV = @as(u32, 5259),
    PerViewAttributesNV = @as(u32, 5260),
    FragmentFullyCoveredEXT = @as(u32, 5265),
    MeshShadingNV = @as(u32, 5266),
    ImageFootprintNV = @as(u32, 5282),
    MeshShadingEXT = @as(u32, 5283),
    FragmentBarycentricKHR = @as(u32, 5284),
    ComputeDerivativeGroupQuadsNV = @as(u32, 5288),
    FragmentDensityEXT = @as(u32, 5291),
    GroupNonUniformPartitionedNV = @as(u32, 5297),
    ShaderNonUniform = @as(u32, 5301),
    RuntimeDescriptorArray = @as(u32, 5302),
    InputAttachmentArrayDynamicIndexing = @as(u32, 5303),
    UniformTexelBufferArrayDynamicIndexing = @as(u32, 5304),
    StorageTexelBufferArrayDynamicIndexing = @as(u32, 5305),
    UniformBufferArrayNonUniformIndexing = @as(u32, 5306),
    SampledImageArrayNonUniformIndexing = @as(u32, 5307),
    StorageBufferArrayNonUniformIndexing = @as(u32, 5308),
    StorageImageArrayNonUniformIndexing = @as(u32, 5309),
    InputAttachmentArrayNonUniformIndexing = @as(u32, 5310),
    UniformTexelBufferArrayNonUniformIndexing = @as(u32, 5311),
    StorageTexelBufferArrayNonUniformIndexing = @as(u32, 5312),
    RayTracingPositionFetchKHR = @as(u32, 5336),
    RayTracingNV = @as(u32, 5340),
    RayTracingMotionBlurNV = @as(u32, 5341),
    VulkanMemoryModel = @as(u32, 5345),
    VulkanMemoryModelDeviceScope = @as(u32, 5346),
    PhysicalStorageBufferAddresses = @as(u32, 5347),
    ComputeDerivativeGroupLinearNV = @as(u32, 5350),
    RayTracingProvisionalKHR = @as(u32, 5353),
    CooperativeMatrixNV = @as(u32, 5357),
    FragmentShaderSampleInterlockEXT = @as(u32, 5363),
    FragmentShaderShadingRateInterlockEXT = @as(u32, 5372),
    ShaderSMBuiltinsNV = @as(u32, 5373),
    FragmentShaderPixelInterlockEXT = @as(u32, 5378),
    DemoteToHelperInvocation = @as(u32, 5379),
    DisplacementMicromapNV = @as(u32, 5380),
    RayTracingOpacityMicromapEXT = @as(u32, 5381),
    ShaderInvocationReorderNV = @as(u32, 5383),
    BindlessTextureNV = @as(u32, 5390),
    RayQueryPositionFetchKHR = @as(u32, 5391),
    AtomicFloat16VectorNV = @as(u32, 5404),
    RayTracingDisplacementMicromapNV = @as(u32, 5409),
    RawAccessChainsNV = @as(u32, 5414),
    SubgroupShuffleINTEL = @as(u32, 5568),
    SubgroupBufferBlockIOINTEL = @as(u32, 5569),
    SubgroupImageBlockIOINTEL = @as(u32, 5570),
    SubgroupImageMediaBlockIOINTEL = @as(u32, 5579),
    RoundToInfinityINTEL = @as(u32, 5582),
    FloatingPointModeINTEL = @as(u32, 5583),
    IntegerFunctions2INTEL = @as(u32, 5584),
    FunctionPointersINTEL = @as(u32, 5603),
    IndirectReferencesINTEL = @as(u32, 5604),
    AsmINTEL = @as(u32, 5606),
    AtomicFloat32MinMaxEXT = @as(u32, 5612),
    AtomicFloat64MinMaxEXT = @as(u32, 5613),
    AtomicFloat16MinMaxEXT = @as(u32, 5616),
    VectorComputeINTEL = @as(u32, 5617),
    VectorAnyINTEL = @as(u32, 5619),
    ExpectAssumeKHR = @as(u32, 5629),
    SubgroupAvcMotionEstimationINTEL = @as(u32, 5696),
    SubgroupAvcMotionEstimationIntraINTEL = @as(u32, 5697),
    SubgroupAvcMotionEstimationChromaINTEL = @as(u32, 5698),
    VariableLengthArrayINTEL = @as(u32, 5817),
    FunctionFloatControlINTEL = @as(u32, 5821),
    FPGAMemoryAttributesINTEL = @as(u32, 5824),
    FPFastMathModeINTEL = @as(u32, 5837),
    ArbitraryPrecisionIntegersINTEL = @as(u32, 5844),
    ArbitraryPrecisionFloatingPointINTEL = @as(u32, 5845),
    UnstructuredLoopControlsINTEL = @as(u32, 5886),
    FPGALoopControlsINTEL = @as(u32, 5888),
    KernelAttributesINTEL = @as(u32, 5892),
    FPGAKernelAttributesINTEL = @as(u32, 5897),
    FPGAMemoryAccessesINTEL = @as(u32, 5898),
    FPGAClusterAttributesINTEL = @as(u32, 5904),
    LoopFuseINTEL = @as(u32, 5906),
    FPGADSPControlINTEL = @as(u32, 5908),
    MemoryAccessAliasingINTEL = @as(u32, 5910),
    FPGAInvocationPipeliningAttributesINTEL = @as(u32, 5916),
    FPGABufferLocationINTEL = @as(u32, 5920),
    ArbitraryPrecisionFixedPointINTEL = @as(u32, 5922),
    USMStorageClassesINTEL = @as(u32, 5935),
    RuntimeAlignedAttributeINTEL = @as(u32, 5939),
    IOPipesINTEL = @as(u32, 5943),
    BlockingPipesINTEL = @as(u32, 5945),
    FPGARegINTEL = @as(u32, 5948),
    DotProductInputAll = @as(u32, 6016),
    DotProductInput4x8Bit = @as(u32, 6017),
    DotProductInput4x8BitPacked = @as(u32, 6018),
    DotProduct = @as(u32, 6019),
    RayCullMaskKHR = @as(u32, 6020),
    CooperativeMatrixKHR = @as(u32, 6022),
    ReplicatedCompositesEXT = @as(u32, 6024),
    BitInstructions = @as(u32, 6025),
    GroupNonUniformRotateKHR = @as(u32, 6026),
    FloatControls2 = @as(u32, 6029),
    AtomicFloat32AddEXT = @as(u32, 6033),
    AtomicFloat64AddEXT = @as(u32, 6034),
    LongCompositesINTEL = @as(u32, 6089),
    OptNoneINTEL = @as(u32, 6094),
    AtomicFloat16AddEXT = @as(u32, 6095),
    DebugInfoModuleINTEL = @as(u32, 6114),
    BFloat16ConversionINTEL = @as(u32, 6115),
    SplitBarrierINTEL = @as(u32, 6141),
    FPGAClusterAttributesV2INTEL = @as(u32, 6150),
    FPGAKernelAttributesv2INTEL = @as(u32, 6161),
    FPMaxErrorINTEL = @as(u32, 6169),
    FPGALatencyControlINTEL = @as(u32, 6171),
    FPGAArgumentInterfacesINTEL = @as(u32, 6174),
    GlobalVariableHostAccessINTEL = @as(u32, 6187),
    GlobalVariableFPGADecorationsINTEL = @as(u32, 6189),
    GroupUniformArithmeticKHR = @as(u32, 6400),
    MaskedGatherScatterINTEL = @as(u32, 6427),
    CacheControlsINTEL = @as(u32, 6441),
    RegisterLimitsINTEL = @as(u32, 6460),
};

pub const RayFlags = enum(u32) {
    OpaqueKHR = @as(u32, 1 << 0),
    NoOpaqueKHR = @as(u32, 1 << 1),
    TerminateOnFirstHitKHR = @as(u32, 1 << 2),
    SkipClosestHitShaderKHR = @as(u32, 1 << 3),
    CullBackFacingTrianglesKHR = @as(u32, 1 << 4),
    CullFrontFacingTrianglesKHR = @as(u32, 1 << 5),
    CullOpaqueKHR = @as(u32, 1 << 6),
    CullNoOpaqueKHR = @as(u32, 1 << 7),
    SkipTrianglesKHR = @as(u32, 1 << 8),
    SkipAABBsKHR = @as(u32, 1 << 9),
    ForceOpacityMicromap2StateEXT = @as(u32, 1 << 10),
};

pub const RayQueryIntersection = enum(u32) {
    RayQueryCandidateIntersectionKHR = @as(u32, 0),
    RayQueryCommittedIntersectionKHR = @as(u32, 1),
};

pub const RayQueryCommittedIntersectionType = enum(u32) {
    RayQueryCommittedIntersectionNoneKHR = @as(u32, 0),
    RayQueryCommittedIntersectionTriangleKHR = @as(u32, 1),
    RayQueryCommittedIntersectionGeneratedKHR = @as(u32, 2),
};

pub const RayQueryCandidateIntersectionType = enum(u32) {
    RayQueryCandidateIntersectionTriangleKHR = @as(u32, 0),
    RayQueryCandidateIntersectionAABBKHR = @as(u32, 1),
};

pub const FragmentShadingRate = enum(u32) {
    Vertical2Pixels = @as(u32, 1 << 0),
    Vertical4Pixels = @as(u32, 1 << 1),
    Horizontal2Pixels = @as(u32, 1 << 2),
    Horizontal4Pixels = @as(u32, 1 << 3),
};

pub const FPDenormMode = enum(u32) {
    Preserve = @as(u32, 0),
    FlushToZero = @as(u32, 1),
};

pub const FPOperationMode = enum(u32) {
    IEEE = @as(u32, 0),
    ALT = @as(u32, 1),
};

pub const QuantizationModes = enum(u32) {
    TRN = @as(u32, 0),
    TRN_ZERO = @as(u32, 1),
    RND = @as(u32, 2),
    RND_ZERO = @as(u32, 3),
    RND_INF = @as(u32, 4),
    RND_MIN_INF = @as(u32, 5),
    RND_CONV = @as(u32, 6),
    RND_CONV_ODD = @as(u32, 7),
};

pub const OverflowModes = enum(u32) {
    WRAP = @as(u32, 0),
    SAT = @as(u32, 1),
    SAT_ZERO = @as(u32, 2),
    SAT_SYM = @as(u32, 3),
};

pub const PackedVectorFormat = enum(u32) {
    PackedVectorFormat4x8Bit = @as(u32, 0),
};

pub const CooperativeMatrixOperands = enum(u32) {
    MatrixASignedComponentsKHR = @as(u32, 1 << 0),
    MatrixBSignedComponentsKHR = @as(u32, 1 << 1),
    MatrixCSignedComponentsKHR = @as(u32, 1 << 2),
    MatrixResultSignedComponentsKHR = @as(u32, 1 << 3),
    SaturatingAccumulationKHR = @as(u32, 1 << 4),
};

pub const CooperativeMatrixLayout = enum(u32) {
    RowMajorKHR = @as(u32, 0),
    ColumnMajorKHR = @as(u32, 1),
    RowBlockedInterleavedARM = @as(u32, 4202),
    ColumnBlockedInterleavedARM = @as(u32, 4203),
};

pub const CooperativeMatrixUse = enum(u32) {
    MatrixAKHR = @as(u32, 0),
    MatrixBKHR = @as(u32, 1),
    MatrixAccumulatorKHR = @as(u32, 2),
};

pub const InitializationModeQualifier = enum(u32) {
    InitOnDeviceReprogramINTEL = @as(u32, 0),
    InitOnDeviceResetINTEL = @as(u32, 1),
};

pub const HostAccessQualifier = enum(u32) {
    NoneINTEL = @as(u32, 0),
    ReadINTEL = @as(u32, 1),
    WriteINTEL = @as(u32, 2),
    ReadWriteINTEL = @as(u32, 3),
};

pub const LoadCacheControl = enum(u32) {
    UncachedINTEL = @as(u32, 0),
    CachedINTEL = @as(u32, 1),
    StreamingINTEL = @as(u32, 2),
    InvalidateAfterReadINTEL = @as(u32, 3),
    ConstCachedINTEL = @as(u32, 4),
};

pub const StoreCacheControl = enum(u32) {
    UncachedINTEL = @as(u32, 0),
    WriteThroughINTEL = @as(u32, 1),
    WriteBackINTEL = @as(u32, 2),
    StreamingINTEL = @as(u32, 3),
};

pub const NamedMaximumNumberOfRegisters = enum(u32) {
    AutoINTEL = @as(u32, 0),
};

pub const RawAccessChainOperands = enum(u32) {
    RobustnessPerComponentNV = @as(u32, 1 << 0),
    RobustnessPerElementNV = @as(u32, 1 << 1),
};

pub const FPEncoding = enum(u32) {
};

pub const Op = enum(u32) {
    OpNop = @as(u32, 0),
    OpUndef = @as(u32, 1),
    OpSourceContinued = @as(u32, 2),
    OpSource = @as(u32, 3),
    OpSourceExtension = @as(u32, 4),
    OpName = @as(u32, 5),
    OpMemberName = @as(u32, 6),
    OpString = @as(u32, 7),
    OpLine = @as(u32, 8),
    OpExtension = @as(u32, 10),
    OpExtInstImport = @as(u32, 11),
    OpExtInst = @as(u32, 12),
    OpMemoryModel = @as(u32, 14),
    OpEntryPoint = @as(u32, 15),
    OpExecutionMode = @as(u32, 16),
    OpCapability = @as(u32, 17),
    OpTypeVoid = @as(u32, 19),
    OpTypeBool = @as(u32, 20),
    OpTypeInt = @as(u32, 21),
    OpTypeFloat = @as(u32, 22),
    OpTypeVector = @as(u32, 23),
    OpTypeMatrix = @as(u32, 24),
    OpTypeImage = @as(u32, 25),
    OpTypeSampler = @as(u32, 26),
    OpTypeSampledImage = @as(u32, 27),
    OpTypeArray = @as(u32, 28),
    OpTypeRuntimeArray = @as(u32, 29),
    OpTypeStruct = @as(u32, 30),
    OpTypeOpaque = @as(u32, 31),
    OpTypePointer = @as(u32, 32),
    OpTypeFunction = @as(u32, 33),
    OpTypeEvent = @as(u32, 34),
    OpTypeDeviceEvent = @as(u32, 35),
    OpTypeReserveId = @as(u32, 36),
    OpTypeQueue = @as(u32, 37),
    OpTypePipe = @as(u32, 38),
    OpTypeForwardPointer = @as(u32, 39),
    OpConstantTrue = @as(u32, 41),
    OpConstantFalse = @as(u32, 42),
    OpConstant = @as(u32, 43),
    OpConstantComposite = @as(u32, 44),
    OpConstantSampler = @as(u32, 45),
    OpConstantNull = @as(u32, 46),
    OpSpecConstantTrue = @as(u32, 48),
    OpSpecConstantFalse = @as(u32, 49),
    OpSpecConstant = @as(u32, 50),
    OpSpecConstantComposite = @as(u32, 51),
    OpSpecConstantOp = @as(u32, 52),
    OpFunction = @as(u32, 54),
    OpFunctionParameter = @as(u32, 55),
    OpFunctionEnd = @as(u32, 56),
    OpFunctionCall = @as(u32, 57),
    OpVariable = @as(u32, 59),
    OpImageTexelPointer = @as(u32, 60),
    OpLoad = @as(u32, 61),
    OpStore = @as(u32, 62),
    OpCopyMemory = @as(u32, 63),
    OpCopyMemorySized = @as(u32, 64),
    OpAccessChain = @as(u32, 65),
    OpInBoundsAccessChain = @as(u32, 66),
    OpPtrAccessChain = @as(u32, 67),
    OpArrayLength = @as(u32, 68),
    OpGenericPtrMemSemantics = @as(u32, 69),
    OpInBoundsPtrAccessChain = @as(u32, 70),
    OpDecorate = @as(u32, 71),
    OpMemberDecorate = @as(u32, 72),
    OpDecorationGroup = @as(u32, 73),
    OpGroupDecorate = @as(u32, 74),
    OpGroupMemberDecorate = @as(u32, 75),
    OpVectorExtractDynamic = @as(u32, 77),
    OpVectorInsertDynamic = @as(u32, 78),
    OpVectorShuffle = @as(u32, 79),
    OpCompositeConstruct = @as(u32, 80),
    OpCompositeExtract = @as(u32, 81),
    OpCompositeInsert = @as(u32, 82),
    OpCopyObject = @as(u32, 83),
    OpTranspose = @as(u32, 84),
    OpSampledImage = @as(u32, 86),
    OpImageSampleImplicitLod = @as(u32, 87),
    OpImageSampleExplicitLod = @as(u32, 88),
    OpImageSampleDrefImplicitLod = @as(u32, 89),
    OpImageSampleDrefExplicitLod = @as(u32, 90),
    OpImageSampleProjImplicitLod = @as(u32, 91),
    OpImageSampleProjExplicitLod = @as(u32, 92),
    OpImageSampleProjDrefImplicitLod = @as(u32, 93),
    OpImageSampleProjDrefExplicitLod = @as(u32, 94),
    OpImageFetch = @as(u32, 95),
    OpImageGather = @as(u32, 96),
    OpImageDrefGather = @as(u32, 97),
    OpImageRead = @as(u32, 98),
    OpImageWrite = @as(u32, 99),
    OpImage = @as(u32, 100),
    OpImageQueryFormat = @as(u32, 101),
    OpImageQueryOrder = @as(u32, 102),
    OpImageQuerySizeLod = @as(u32, 103),
    OpImageQuerySize = @as(u32, 104),
    OpImageQueryLod = @as(u32, 105),
    OpImageQueryLevels = @as(u32, 106),
    OpImageQuerySamples = @as(u32, 107),
    OpConvertFToU = @as(u32, 109),
    OpConvertFToS = @as(u32, 110),
    OpConvertSToF = @as(u32, 111),
    OpConvertUToF = @as(u32, 112),
    OpUConvert = @as(u32, 113),
    OpSConvert = @as(u32, 114),
    OpFConvert = @as(u32, 115),
    OpQuantizeToF16 = @as(u32, 116),
    OpConvertPtrToU = @as(u32, 117),
    OpSatConvertSToU = @as(u32, 118),
    OpSatConvertUToS = @as(u32, 119),
    OpConvertUToPtr = @as(u32, 120),
    OpPtrCastToGeneric = @as(u32, 121),
    OpGenericCastToPtr = @as(u32, 122),
    OpGenericCastToPtrExplicit = @as(u32, 123),
    OpBitcast = @as(u32, 124),
    OpSNegate = @as(u32, 126),
    OpFNegate = @as(u32, 127),
    OpIAdd = @as(u32, 128),
    OpFAdd = @as(u32, 129),
    OpISub = @as(u32, 130),
    OpFSub = @as(u32, 131),
    OpIMul = @as(u32, 132),
    OpFMul = @as(u32, 133),
    OpUDiv = @as(u32, 134),
    OpSDiv = @as(u32, 135),
    OpFDiv = @as(u32, 136),
    OpUMod = @as(u32, 137),
    OpSRem = @as(u32, 138),
    OpSMod = @as(u32, 139),
    OpFRem = @as(u32, 140),
    OpFMod = @as(u32, 141),
    OpVectorTimesScalar = @as(u32, 142),
    OpMatrixTimesScalar = @as(u32, 143),
    OpVectorTimesMatrix = @as(u32, 144),
    OpMatrixTimesVector = @as(u32, 145),
    OpMatrixTimesMatrix = @as(u32, 146),
    OpOuterProduct = @as(u32, 147),
    OpDot = @as(u32, 148),
    OpIAddCarry = @as(u32, 149),
    OpISubBorrow = @as(u32, 150),
    OpUMulExtended = @as(u32, 151),
    OpSMulExtended = @as(u32, 152),
    OpAny = @as(u32, 154),
    OpAll = @as(u32, 155),
    OpIsNan = @as(u32, 156),
    OpIsInf = @as(u32, 157),
    OpIsFinite = @as(u32, 158),
    OpIsNormal = @as(u32, 159),
    OpSignBitSet = @as(u32, 160),
    OpLessOrGreater = @as(u32, 161),
    OpOrdered = @as(u32, 162),
    OpUnordered = @as(u32, 163),
    OpLogicalEqual = @as(u32, 164),
    OpLogicalNotEqual = @as(u32, 165),
    OpLogicalOr = @as(u32, 166),
    OpLogicalAnd = @as(u32, 167),
    OpLogicalNot = @as(u32, 168),
    OpSelect = @as(u32, 169),
    OpIEqual = @as(u32, 170),
    OpINotEqual = @as(u32, 171),
    OpUGreaterThan = @as(u32, 172),
    OpSGreaterThan = @as(u32, 173),
    OpUGreaterThanEqual = @as(u32, 174),
    OpSGreaterThanEqual = @as(u32, 175),
    OpULessThan = @as(u32, 176),
    OpSLessThan = @as(u32, 177),
    OpULessThanEqual = @as(u32, 178),
    OpSLessThanEqual = @as(u32, 179),
    OpFOrdEqual = @as(u32, 180),
    OpFUnordEqual = @as(u32, 181),
    OpFOrdNotEqual = @as(u32, 182),
    OpFUnordNotEqual = @as(u32, 183),
    OpFOrdLessThan = @as(u32, 184),
    OpFUnordLessThan = @as(u32, 185),
    OpFOrdGreaterThan = @as(u32, 186),
    OpFUnordGreaterThan = @as(u32, 187),
    OpFOrdLessThanEqual = @as(u32, 188),
    OpFUnordLessThanEqual = @as(u32, 189),
    OpFOrdGreaterThanEqual = @as(u32, 190),
    OpFUnordGreaterThanEqual = @as(u32, 191),
    OpShiftRightLogical = @as(u32, 194),
    OpShiftRightArithmetic = @as(u32, 195),
    OpShiftLeftLogical = @as(u32, 196),
    OpBitwiseOr = @as(u32, 197),
    OpBitwiseXor = @as(u32, 198),
    OpBitwiseAnd = @as(u32, 199),
    OpNot = @as(u32, 200),
    OpBitFieldInsert = @as(u32, 201),
    OpBitFieldSExtract = @as(u32, 202),
    OpBitFieldUExtract = @as(u32, 203),
    OpBitReverse = @as(u32, 204),
    OpBitCount = @as(u32, 205),
    OpDPdx = @as(u32, 207),
    OpDPdy = @as(u32, 208),
    OpFwidth = @as(u32, 209),
    OpDPdxFine = @as(u32, 210),
    OpDPdyFine = @as(u32, 211),
    OpFwidthFine = @as(u32, 212),
    OpDPdxCoarse = @as(u32, 213),
    OpDPdyCoarse = @as(u32, 214),
    OpFwidthCoarse = @as(u32, 215),
    OpEmitVertex = @as(u32, 218),
    OpEndPrimitive = @as(u32, 219),
    OpEmitStreamVertex = @as(u32, 220),
    OpEndStreamPrimitive = @as(u32, 221),
    OpControlBarrier = @as(u32, 224),
    OpMemoryBarrier = @as(u32, 225),
    OpAtomicLoad = @as(u32, 227),
    OpAtomicStore = @as(u32, 228),
    OpAtomicExchange = @as(u32, 229),
    OpAtomicCompareExchange = @as(u32, 230),
    OpAtomicCompareExchangeWeak = @as(u32, 231),
    OpAtomicIIncrement = @as(u32, 232),
    OpAtomicIDecrement = @as(u32, 233),
    OpAtomicIAdd = @as(u32, 234),
    OpAtomicISub = @as(u32, 235),
    OpAtomicSMin = @as(u32, 236),
    OpAtomicUMin = @as(u32, 237),
    OpAtomicSMax = @as(u32, 238),
    OpAtomicUMax = @as(u32, 239),
    OpAtomicAnd = @as(u32, 240),
    OpAtomicOr = @as(u32, 241),
    OpAtomicXor = @as(u32, 242),
    OpPhi = @as(u32, 245),
    OpLoopMerge = @as(u32, 246),
    OpSelectionMerge = @as(u32, 247),
    OpLabel = @as(u32, 248),
    OpBranch = @as(u32, 249),
    OpBranchConditional = @as(u32, 250),
    OpSwitch = @as(u32, 251),
    OpKill = @as(u32, 252),
    OpReturn = @as(u32, 253),
    OpReturnValue = @as(u32, 254),
    OpUnreachable = @as(u32, 255),
    OpLifetimeStart = @as(u32, 256),
    OpLifetimeStop = @as(u32, 257),
    OpGroupAsyncCopy = @as(u32, 259),
    OpGroupWaitEvents = @as(u32, 260),
    OpGroupAll = @as(u32, 261),
    OpGroupAny = @as(u32, 262),
    OpGroupBroadcast = @as(u32, 263),
    OpGroupIAdd = @as(u32, 264),
    OpGroupFAdd = @as(u32, 265),
    OpGroupFMin = @as(u32, 266),
    OpGroupUMin = @as(u32, 267),
    OpGroupSMin = @as(u32, 268),
    OpGroupFMax = @as(u32, 269),
    OpGroupUMax = @as(u32, 270),
    OpGroupSMax = @as(u32, 271),
    OpReadPipe = @as(u32, 274),
    OpWritePipe = @as(u32, 275),
    OpReservedReadPipe = @as(u32, 276),
    OpReservedWritePipe = @as(u32, 277),
    OpReserveReadPipePackets = @as(u32, 278),
    OpReserveWritePipePackets = @as(u32, 279),
    OpCommitReadPipe = @as(u32, 280),
    OpCommitWritePipe = @as(u32, 281),
    OpIsValidReserveId = @as(u32, 282),
    OpGetNumPipePackets = @as(u32, 283),
    OpGetMaxPipePackets = @as(u32, 284),
    OpGroupReserveReadPipePackets = @as(u32, 285),
    OpGroupReserveWritePipePackets = @as(u32, 286),
    OpGroupCommitReadPipe = @as(u32, 287),
    OpGroupCommitWritePipe = @as(u32, 288),
    OpEnqueueMarker = @as(u32, 291),
    OpEnqueueKernel = @as(u32, 292),
    OpGetKernelNDrangeSubGroupCount = @as(u32, 293),
    OpGetKernelNDrangeMaxSubGroupSize = @as(u32, 294),
    OpGetKernelWorkGroupSize = @as(u32, 295),
    OpGetKernelPreferredWorkGroupSizeMultiple = @as(u32, 296),
    OpRetainEvent = @as(u32, 297),
    OpReleaseEvent = @as(u32, 298),
    OpCreateUserEvent = @as(u32, 299),
    OpIsValidEvent = @as(u32, 300),
    OpSetUserEventStatus = @as(u32, 301),
    OpCaptureEventProfilingInfo = @as(u32, 302),
    OpGetDefaultQueue = @as(u32, 303),
    OpBuildNDRange = @as(u32, 304),
    OpImageSparseSampleImplicitLod = @as(u32, 305),
    OpImageSparseSampleExplicitLod = @as(u32, 306),
    OpImageSparseSampleDrefImplicitLod = @as(u32, 307),
    OpImageSparseSampleDrefExplicitLod = @as(u32, 308),
    OpImageSparseSampleProjImplicitLod = @as(u32, 309),
    OpImageSparseSampleProjExplicitLod = @as(u32, 310),
    OpImageSparseSampleProjDrefImplicitLod = @as(u32, 311),
    OpImageSparseSampleProjDrefExplicitLod = @as(u32, 312),
    OpImageSparseFetch = @as(u32, 313),
    OpImageSparseGather = @as(u32, 314),
    OpImageSparseDrefGather = @as(u32, 315),
    OpImageSparseTexelsResident = @as(u32, 316),
    OpNoLine = @as(u32, 317),
    OpAtomicFlagTestAndSet = @as(u32, 318),
    OpAtomicFlagClear = @as(u32, 319),
    OpImageSparseRead = @as(u32, 320),
    OpSizeOf = @as(u32, 321),
    OpTypePipeStorage = @as(u32, 322),
    OpConstantPipeStorage = @as(u32, 323),
    OpCreatePipeFromPipeStorage = @as(u32, 324),
    OpGetKernelLocalSizeForSubgroupCount = @as(u32, 325),
    OpGetKernelMaxNumSubgroups = @as(u32, 326),
    OpTypeNamedBarrier = @as(u32, 327),
    OpNamedBarrierInitialize = @as(u32, 328),
    OpMemoryNamedBarrier = @as(u32, 329),
    OpModuleProcessed = @as(u32, 330),
    OpExecutionModeId = @as(u32, 331),
    OpDecorateId = @as(u32, 332),
    OpGroupNonUniformElect = @as(u32, 333),
    OpGroupNonUniformAll = @as(u32, 334),
    OpGroupNonUniformAny = @as(u32, 335),
    OpGroupNonUniformAllEqual = @as(u32, 336),
    OpGroupNonUniformBroadcast = @as(u32, 337),
    OpGroupNonUniformBroadcastFirst = @as(u32, 338),
    OpGroupNonUniformBallot = @as(u32, 339),
    OpGroupNonUniformInverseBallot = @as(u32, 340),
    OpGroupNonUniformBallotBitExtract = @as(u32, 341),
    OpGroupNonUniformBallotBitCount = @as(u32, 342),
    OpGroupNonUniformBallotFindLSB = @as(u32, 343),
    OpGroupNonUniformBallotFindMSB = @as(u32, 344),
    OpGroupNonUniformShuffle = @as(u32, 345),
    OpGroupNonUniformShuffleXor = @as(u32, 346),
    OpGroupNonUniformShuffleUp = @as(u32, 347),
    OpGroupNonUniformShuffleDown = @as(u32, 348),
    OpGroupNonUniformIAdd = @as(u32, 349),
    OpGroupNonUniformFAdd = @as(u32, 350),
    OpGroupNonUniformIMul = @as(u32, 351),
    OpGroupNonUniformFMul = @as(u32, 352),
    OpGroupNonUniformSMin = @as(u32, 353),
    OpGroupNonUniformUMin = @as(u32, 354),
    OpGroupNonUniformFMin = @as(u32, 355),
    OpGroupNonUniformSMax = @as(u32, 356),
    OpGroupNonUniformUMax = @as(u32, 357),
    OpGroupNonUniformFMax = @as(u32, 358),
    OpGroupNonUniformBitwiseAnd = @as(u32, 359),
    OpGroupNonUniformBitwiseOr = @as(u32, 360),
    OpGroupNonUniformBitwiseXor = @as(u32, 361),
    OpGroupNonUniformLogicalAnd = @as(u32, 362),
    OpGroupNonUniformLogicalOr = @as(u32, 363),
    OpGroupNonUniformLogicalXor = @as(u32, 364),
    OpGroupNonUniformQuadBroadcast = @as(u32, 365),
    OpGroupNonUniformQuadSwap = @as(u32, 366),
    OpCopyLogical = @as(u32, 400),
    OpPtrEqual = @as(u32, 401),
    OpPtrNotEqual = @as(u32, 402),
    OpPtrDiff = @as(u32, 403),
    OpColorAttachmentReadEXT = @as(u32, 4160),
    OpDepthAttachmentReadEXT = @as(u32, 4161),
    OpStencilAttachmentReadEXT = @as(u32, 4162),
    OpTerminateInvocation = @as(u32, 4416),
    OpSubgroupBallotKHR = @as(u32, 4421),
    OpSubgroupFirstInvocationKHR = @as(u32, 4422),
    OpSubgroupAllKHR = @as(u32, 4428),
    OpSubgroupAnyKHR = @as(u32, 4429),
    OpSubgroupAllEqualKHR = @as(u32, 4430),
    OpGroupNonUniformRotateKHR = @as(u32, 4431),
    OpSubgroupReadInvocationKHR = @as(u32, 4432),
    OpExtInstWithForwardRefsKHR = @as(u32, 4433),
    OpTraceRayKHR = @as(u32, 4445),
    OpExecuteCallableKHR = @as(u32, 4446),
    OpConvertUToAccelerationStructureKHR = @as(u32, 4447),
    OpIgnoreIntersectionKHR = @as(u32, 4448),
    OpTerminateRayKHR = @as(u32, 4449),
    OpSDot = @as(u32, 4450),
    OpUDot = @as(u32, 4451),
    OpSUDot = @as(u32, 4452),
    OpSDotAccSat = @as(u32, 4453),
    OpUDotAccSat = @as(u32, 4454),
    OpSUDotAccSat = @as(u32, 4455),
    OpTypeCooperativeMatrixKHR = @as(u32, 4456),
    OpCooperativeMatrixLoadKHR = @as(u32, 4457),
    OpCooperativeMatrixStoreKHR = @as(u32, 4458),
    OpCooperativeMatrixMulAddKHR = @as(u32, 4459),
    OpCooperativeMatrixLengthKHR = @as(u32, 4460),
    OpConstantCompositeReplicateEXT = @as(u32, 4461),
    OpSpecConstantCompositeReplicateEXT = @as(u32, 4462),
    OpCompositeConstructReplicateEXT = @as(u32, 4463),
    OpTypeRayQueryKHR = @as(u32, 4472),
    OpRayQueryInitializeKHR = @as(u32, 4473),
    OpRayQueryTerminateKHR = @as(u32, 4474),
    OpRayQueryGenerateIntersectionKHR = @as(u32, 4475),
    OpRayQueryConfirmIntersectionKHR = @as(u32, 4476),
    OpRayQueryProceedKHR = @as(u32, 4477),
    OpRayQueryGetIntersectionTypeKHR = @as(u32, 4479),
    OpImageSampleWeightedQCOM = @as(u32, 4480),
    OpImageBoxFilterQCOM = @as(u32, 4481),
    OpImageBlockMatchSSDQCOM = @as(u32, 4482),
    OpImageBlockMatchSADQCOM = @as(u32, 4483),
    OpImageBlockMatchWindowSSDQCOM = @as(u32, 4500),
    OpImageBlockMatchWindowSADQCOM = @as(u32, 4501),
    OpImageBlockMatchGatherSSDQCOM = @as(u32, 4502),
    OpImageBlockMatchGatherSADQCOM = @as(u32, 4503),
    OpGroupIAddNonUniformAMD = @as(u32, 5000),
    OpGroupFAddNonUniformAMD = @as(u32, 5001),
    OpGroupFMinNonUniformAMD = @as(u32, 5002),
    OpGroupUMinNonUniformAMD = @as(u32, 5003),
    OpGroupSMinNonUniformAMD = @as(u32, 5004),
    OpGroupFMaxNonUniformAMD = @as(u32, 5005),
    OpGroupUMaxNonUniformAMD = @as(u32, 5006),
    OpGroupSMaxNonUniformAMD = @as(u32, 5007),
    OpFragmentMaskFetchAMD = @as(u32, 5011),
    OpFragmentFetchAMD = @as(u32, 5012),
    OpReadClockKHR = @as(u32, 5056),
    OpFinalizeNodePayloadsAMDX = @as(u32, 5075),
    OpFinishWritingNodePayloadAMDX = @as(u32, 5078),
    OpInitializeNodePayloadsAMDX = @as(u32, 5090),
    OpGroupNonUniformQuadAllKHR = @as(u32, 5110),
    OpGroupNonUniformQuadAnyKHR = @as(u32, 5111),
    OpHitObjectRecordHitMotionNV = @as(u32, 5249),
    OpHitObjectRecordHitWithIndexMotionNV = @as(u32, 5250),
    OpHitObjectRecordMissMotionNV = @as(u32, 5251),
    OpHitObjectGetWorldToObjectNV = @as(u32, 5252),
    OpHitObjectGetObjectToWorldNV = @as(u32, 5253),
    OpHitObjectGetObjectRayDirectionNV = @as(u32, 5254),
    OpHitObjectGetObjectRayOriginNV = @as(u32, 5255),
    OpHitObjectTraceRayMotionNV = @as(u32, 5256),
    OpHitObjectGetShaderRecordBufferHandleNV = @as(u32, 5257),
    OpHitObjectGetShaderBindingTableRecordIndexNV = @as(u32, 5258),
    OpHitObjectRecordEmptyNV = @as(u32, 5259),
    OpHitObjectTraceRayNV = @as(u32, 5260),
    OpHitObjectRecordHitNV = @as(u32, 5261),
    OpHitObjectRecordHitWithIndexNV = @as(u32, 5262),
    OpHitObjectRecordMissNV = @as(u32, 5263),
    OpHitObjectExecuteShaderNV = @as(u32, 5264),
    OpHitObjectGetCurrentTimeNV = @as(u32, 5265),
    OpHitObjectGetAttributesNV = @as(u32, 5266),
    OpHitObjectGetHitKindNV = @as(u32, 5267),
    OpHitObjectGetPrimitiveIndexNV = @as(u32, 5268),
    OpHitObjectGetGeometryIndexNV = @as(u32, 5269),
    OpHitObjectGetInstanceIdNV = @as(u32, 5270),
    OpHitObjectGetInstanceCustomIndexNV = @as(u32, 5271),
    OpHitObjectGetWorldRayDirectionNV = @as(u32, 5272),
    OpHitObjectGetWorldRayOriginNV = @as(u32, 5273),
    OpHitObjectGetRayTMaxNV = @as(u32, 5274),
    OpHitObjectGetRayTMinNV = @as(u32, 5275),
    OpHitObjectIsEmptyNV = @as(u32, 5276),
    OpHitObjectIsHitNV = @as(u32, 5277),
    OpHitObjectIsMissNV = @as(u32, 5278),
    OpReorderThreadWithHitObjectNV = @as(u32, 5279),
    OpReorderThreadWithHintNV = @as(u32, 5280),
    OpTypeHitObjectNV = @as(u32, 5281),
    OpImageSampleFootprintNV = @as(u32, 5283),
    OpEmitMeshTasksEXT = @as(u32, 5294),
    OpSetMeshOutputsEXT = @as(u32, 5295),
    OpGroupNonUniformPartitionNV = @as(u32, 5296),
    OpWritePackedPrimitiveIndices4x8NV = @as(u32, 5299),
    OpFetchMicroTriangleVertexPositionNV = @as(u32, 5300),
    OpFetchMicroTriangleVertexBarycentricNV = @as(u32, 5301),
    OpReportIntersectionKHR = @as(u32, 5334),
    OpIgnoreIntersectionNV = @as(u32, 5335),
    OpTerminateRayNV = @as(u32, 5336),
    OpTraceNV = @as(u32, 5337),
    OpTraceMotionNV = @as(u32, 5338),
    OpTraceRayMotionNV = @as(u32, 5339),
    OpRayQueryGetIntersectionTriangleVertexPositionsKHR = @as(u32, 5340),
    OpTypeAccelerationStructureKHR = @as(u32, 5341),
    OpExecuteCallableNV = @as(u32, 5344),
    OpTypeCooperativeMatrixNV = @as(u32, 5358),
    OpCooperativeMatrixLoadNV = @as(u32, 5359),
    OpCooperativeMatrixStoreNV = @as(u32, 5360),
    OpCooperativeMatrixMulAddNV = @as(u32, 5361),
    OpCooperativeMatrixLengthNV = @as(u32, 5362),
    OpBeginInvocationInterlockEXT = @as(u32, 5364),
    OpEndInvocationInterlockEXT = @as(u32, 5365),
    OpDemoteToHelperInvocation = @as(u32, 5380),
    OpIsHelperInvocationEXT = @as(u32, 5381),
    OpConvertUToImageNV = @as(u32, 5391),
    OpConvertUToSamplerNV = @as(u32, 5392),
    OpConvertImageToUNV = @as(u32, 5393),
    OpConvertSamplerToUNV = @as(u32, 5394),
    OpConvertUToSampledImageNV = @as(u32, 5395),
    OpConvertSampledImageToUNV = @as(u32, 5396),
    OpSamplerImageAddressingModeNV = @as(u32, 5397),
    OpRawAccessChainNV = @as(u32, 5398),
    OpSubgroupShuffleINTEL = @as(u32, 5571),
    OpSubgroupShuffleDownINTEL = @as(u32, 5572),
    OpSubgroupShuffleUpINTEL = @as(u32, 5573),
    OpSubgroupShuffleXorINTEL = @as(u32, 5574),
    OpSubgroupBlockReadINTEL = @as(u32, 5575),
    OpSubgroupBlockWriteINTEL = @as(u32, 5576),
    OpSubgroupImageBlockReadINTEL = @as(u32, 5577),
    OpSubgroupImageBlockWriteINTEL = @as(u32, 5578),
    OpSubgroupImageMediaBlockReadINTEL = @as(u32, 5580),
    OpSubgroupImageMediaBlockWriteINTEL = @as(u32, 5581),
    OpUCountLeadingZerosINTEL = @as(u32, 5585),
    OpUCountTrailingZerosINTEL = @as(u32, 5586),
    OpAbsISubINTEL = @as(u32, 5587),
    OpAbsUSubINTEL = @as(u32, 5588),
    OpIAddSatINTEL = @as(u32, 5589),
    OpUAddSatINTEL = @as(u32, 5590),
    OpIAverageINTEL = @as(u32, 5591),
    OpUAverageINTEL = @as(u32, 5592),
    OpIAverageRoundedINTEL = @as(u32, 5593),
    OpUAverageRoundedINTEL = @as(u32, 5594),
    OpISubSatINTEL = @as(u32, 5595),
    OpUSubSatINTEL = @as(u32, 5596),
    OpIMul32x16INTEL = @as(u32, 5597),
    OpUMul32x16INTEL = @as(u32, 5598),
    OpConstantFunctionPointerINTEL = @as(u32, 5600),
    OpFunctionPointerCallINTEL = @as(u32, 5601),
    OpAsmTargetINTEL = @as(u32, 5609),
    OpAsmINTEL = @as(u32, 5610),
    OpAsmCallINTEL = @as(u32, 5611),
    OpAtomicFMinEXT = @as(u32, 5614),
    OpAtomicFMaxEXT = @as(u32, 5615),
    OpAssumeTrueKHR = @as(u32, 5630),
    OpExpectKHR = @as(u32, 5631),
    OpDecorateString = @as(u32, 5632),
    OpMemberDecorateString = @as(u32, 5633),
    OpVmeImageINTEL = @as(u32, 5699),
    OpTypeVmeImageINTEL = @as(u32, 5700),
    OpTypeAvcImePayloadINTEL = @as(u32, 5701),
    OpTypeAvcRefPayloadINTEL = @as(u32, 5702),
    OpTypeAvcSicPayloadINTEL = @as(u32, 5703),
    OpTypeAvcMcePayloadINTEL = @as(u32, 5704),
    OpTypeAvcMceResultINTEL = @as(u32, 5705),
    OpTypeAvcImeResultINTEL = @as(u32, 5706),
    OpTypeAvcImeResultSingleReferenceStreamoutINTEL = @as(u32, 5707),
    OpTypeAvcImeResultDualReferenceStreamoutINTEL = @as(u32, 5708),
    OpTypeAvcImeSingleReferenceStreaminINTEL = @as(u32, 5709),
    OpTypeAvcImeDualReferenceStreaminINTEL = @as(u32, 5710),
    OpTypeAvcRefResultINTEL = @as(u32, 5711),
    OpTypeAvcSicResultINTEL = @as(u32, 5712),
    OpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL = @as(u32, 5713),
    OpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL = @as(u32, 5714),
    OpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL = @as(u32, 5715),
    OpSubgroupAvcMceSetInterShapePenaltyINTEL = @as(u32, 5716),
    OpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL = @as(u32, 5717),
    OpSubgroupAvcMceSetInterDirectionPenaltyINTEL = @as(u32, 5718),
    OpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL = @as(u32, 5719),
    OpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL = @as(u32, 5720),
    OpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL = @as(u32, 5721),
    OpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL = @as(u32, 5722),
    OpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL = @as(u32, 5723),
    OpSubgroupAvcMceSetMotionVectorCostFunctionINTEL = @as(u32, 5724),
    OpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL = @as(u32, 5725),
    OpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL = @as(u32, 5726),
    OpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL = @as(u32, 5727),
    OpSubgroupAvcMceSetAcOnlyHaarINTEL = @as(u32, 5728),
    OpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL = @as(u32, 5729),
    OpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL = @as(u32, 5730),
    OpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL = @as(u32, 5731),
    OpSubgroupAvcMceConvertToImePayloadINTEL = @as(u32, 5732),
    OpSubgroupAvcMceConvertToImeResultINTEL = @as(u32, 5733),
    OpSubgroupAvcMceConvertToRefPayloadINTEL = @as(u32, 5734),
    OpSubgroupAvcMceConvertToRefResultINTEL = @as(u32, 5735),
    OpSubgroupAvcMceConvertToSicPayloadINTEL = @as(u32, 5736),
    OpSubgroupAvcMceConvertToSicResultINTEL = @as(u32, 5737),
    OpSubgroupAvcMceGetMotionVectorsINTEL = @as(u32, 5738),
    OpSubgroupAvcMceGetInterDistortionsINTEL = @as(u32, 5739),
    OpSubgroupAvcMceGetBestInterDistortionsINTEL = @as(u32, 5740),
    OpSubgroupAvcMceGetInterMajorShapeINTEL = @as(u32, 5741),
    OpSubgroupAvcMceGetInterMinorShapeINTEL = @as(u32, 5742),
    OpSubgroupAvcMceGetInterDirectionsINTEL = @as(u32, 5743),
    OpSubgroupAvcMceGetInterMotionVectorCountINTEL = @as(u32, 5744),
    OpSubgroupAvcMceGetInterReferenceIdsINTEL = @as(u32, 5745),
    OpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL = @as(u32, 5746),
    OpSubgroupAvcImeInitializeINTEL = @as(u32, 5747),
    OpSubgroupAvcImeSetSingleReferenceINTEL = @as(u32, 5748),
    OpSubgroupAvcImeSetDualReferenceINTEL = @as(u32, 5749),
    OpSubgroupAvcImeRefWindowSizeINTEL = @as(u32, 5750),
    OpSubgroupAvcImeAdjustRefOffsetINTEL = @as(u32, 5751),
    OpSubgroupAvcImeConvertToMcePayloadINTEL = @as(u32, 5752),
    OpSubgroupAvcImeSetMaxMotionVectorCountINTEL = @as(u32, 5753),
    OpSubgroupAvcImeSetUnidirectionalMixDisableINTEL = @as(u32, 5754),
    OpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL = @as(u32, 5755),
    OpSubgroupAvcImeSetWeightedSadINTEL = @as(u32, 5756),
    OpSubgroupAvcImeEvaluateWithSingleReferenceINTEL = @as(u32, 5757),
    OpSubgroupAvcImeEvaluateWithDualReferenceINTEL = @as(u32, 5758),
    OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL = @as(u32, 5759),
    OpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL = @as(u32, 5760),
    OpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL = @as(u32, 5761),
    OpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL = @as(u32, 5762),
    OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL = @as(u32, 5763),
    OpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL = @as(u32, 5764),
    OpSubgroupAvcImeConvertToMceResultINTEL = @as(u32, 5765),
    OpSubgroupAvcImeGetSingleReferenceStreaminINTEL = @as(u32, 5766),
    OpSubgroupAvcImeGetDualReferenceStreaminINTEL = @as(u32, 5767),
    OpSubgroupAvcImeStripSingleReferenceStreamoutINTEL = @as(u32, 5768),
    OpSubgroupAvcImeStripDualReferenceStreamoutINTEL = @as(u32, 5769),
    OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL = @as(u32, 5770),
    OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL = @as(u32, 5771),
    OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL = @as(u32, 5772),
    OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL = @as(u32, 5773),
    OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL = @as(u32, 5774),
    OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL = @as(u32, 5775),
    OpSubgroupAvcImeGetBorderReachedINTEL = @as(u32, 5776),
    OpSubgroupAvcImeGetTruncatedSearchIndicationINTEL = @as(u32, 5777),
    OpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL = @as(u32, 5778),
    OpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL = @as(u32, 5779),
    OpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL = @as(u32, 5780),
    OpSubgroupAvcFmeInitializeINTEL = @as(u32, 5781),
    OpSubgroupAvcBmeInitializeINTEL = @as(u32, 5782),
    OpSubgroupAvcRefConvertToMcePayloadINTEL = @as(u32, 5783),
    OpSubgroupAvcRefSetBidirectionalMixDisableINTEL = @as(u32, 5784),
    OpSubgroupAvcRefSetBilinearFilterEnableINTEL = @as(u32, 5785),
    OpSubgroupAvcRefEvaluateWithSingleReferenceINTEL = @as(u32, 5786),
    OpSubgroupAvcRefEvaluateWithDualReferenceINTEL = @as(u32, 5787),
    OpSubgroupAvcRefEvaluateWithMultiReferenceINTEL = @as(u32, 5788),
    OpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL = @as(u32, 5789),
    OpSubgroupAvcRefConvertToMceResultINTEL = @as(u32, 5790),
    OpSubgroupAvcSicInitializeINTEL = @as(u32, 5791),
    OpSubgroupAvcSicConfigureSkcINTEL = @as(u32, 5792),
    OpSubgroupAvcSicConfigureIpeLumaINTEL = @as(u32, 5793),
    OpSubgroupAvcSicConfigureIpeLumaChromaINTEL = @as(u32, 5794),
    OpSubgroupAvcSicGetMotionVectorMaskINTEL = @as(u32, 5795),
    OpSubgroupAvcSicConvertToMcePayloadINTEL = @as(u32, 5796),
    OpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL = @as(u32, 5797),
    OpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL = @as(u32, 5798),
    OpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL = @as(u32, 5799),
    OpSubgroupAvcSicSetBilinearFilterEnableINTEL = @as(u32, 5800),
    OpSubgroupAvcSicSetSkcForwardTransformEnableINTEL = @as(u32, 5801),
    OpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL = @as(u32, 5802),
    OpSubgroupAvcSicEvaluateIpeINTEL = @as(u32, 5803),
    OpSubgroupAvcSicEvaluateWithSingleReferenceINTEL = @as(u32, 5804),
    OpSubgroupAvcSicEvaluateWithDualReferenceINTEL = @as(u32, 5805),
    OpSubgroupAvcSicEvaluateWithMultiReferenceINTEL = @as(u32, 5806),
    OpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL = @as(u32, 5807),
    OpSubgroupAvcSicConvertToMceResultINTEL = @as(u32, 5808),
    OpSubgroupAvcSicGetIpeLumaShapeINTEL = @as(u32, 5809),
    OpSubgroupAvcSicGetBestIpeLumaDistortionINTEL = @as(u32, 5810),
    OpSubgroupAvcSicGetBestIpeChromaDistortionINTEL = @as(u32, 5811),
    OpSubgroupAvcSicGetPackedIpeLumaModesINTEL = @as(u32, 5812),
    OpSubgroupAvcSicGetIpeChromaModeINTEL = @as(u32, 5813),
    OpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL = @as(u32, 5814),
    OpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL = @as(u32, 5815),
    OpSubgroupAvcSicGetInterRawSadsINTEL = @as(u32, 5816),
    OpVariableLengthArrayINTEL = @as(u32, 5818),
    OpSaveMemoryINTEL = @as(u32, 5819),
    OpRestoreMemoryINTEL = @as(u32, 5820),
    OpArbitraryFloatSinCosPiINTEL = @as(u32, 5840),
    OpArbitraryFloatCastINTEL = @as(u32, 5841),
    OpArbitraryFloatCastFromIntINTEL = @as(u32, 5842),
    OpArbitraryFloatCastToIntINTEL = @as(u32, 5843),
    OpArbitraryFloatAddINTEL = @as(u32, 5846),
    OpArbitraryFloatSubINTEL = @as(u32, 5847),
    OpArbitraryFloatMulINTEL = @as(u32, 5848),
    OpArbitraryFloatDivINTEL = @as(u32, 5849),
    OpArbitraryFloatGTINTEL = @as(u32, 5850),
    OpArbitraryFloatGEINTEL = @as(u32, 5851),
    OpArbitraryFloatLTINTEL = @as(u32, 5852),
    OpArbitraryFloatLEINTEL = @as(u32, 5853),
    OpArbitraryFloatEQINTEL = @as(u32, 5854),
    OpArbitraryFloatRecipINTEL = @as(u32, 5855),
    OpArbitraryFloatRSqrtINTEL = @as(u32, 5856),
    OpArbitraryFloatCbrtINTEL = @as(u32, 5857),
    OpArbitraryFloatHypotINTEL = @as(u32, 5858),
    OpArbitraryFloatSqrtINTEL = @as(u32, 5859),
    OpArbitraryFloatLogINTEL = @as(u32, 5860),
    OpArbitraryFloatLog2INTEL = @as(u32, 5861),
    OpArbitraryFloatLog10INTEL = @as(u32, 5862),
    OpArbitraryFloatLog1pINTEL = @as(u32, 5863),
    OpArbitraryFloatExpINTEL = @as(u32, 5864),
    OpArbitraryFloatExp2INTEL = @as(u32, 5865),
    OpArbitraryFloatExp10INTEL = @as(u32, 5866),
    OpArbitraryFloatExpm1INTEL = @as(u32, 5867),
    OpArbitraryFloatSinINTEL = @as(u32, 5868),
    OpArbitraryFloatCosINTEL = @as(u32, 5869),
    OpArbitraryFloatSinCosINTEL = @as(u32, 5870),
    OpArbitraryFloatSinPiINTEL = @as(u32, 5871),
    OpArbitraryFloatCosPiINTEL = @as(u32, 5872),
    OpArbitraryFloatASinINTEL = @as(u32, 5873),
    OpArbitraryFloatASinPiINTEL = @as(u32, 5874),
    OpArbitraryFloatACosINTEL = @as(u32, 5875),
    OpArbitraryFloatACosPiINTEL = @as(u32, 5876),
    OpArbitraryFloatATanINTEL = @as(u32, 5877),
    OpArbitraryFloatATanPiINTEL = @as(u32, 5878),
    OpArbitraryFloatATan2INTEL = @as(u32, 5879),
    OpArbitraryFloatPowINTEL = @as(u32, 5880),
    OpArbitraryFloatPowRINTEL = @as(u32, 5881),
    OpArbitraryFloatPowNINTEL = @as(u32, 5882),
    OpLoopControlINTEL = @as(u32, 5887),
    OpAliasDomainDeclINTEL = @as(u32, 5911),
    OpAliasScopeDeclINTEL = @as(u32, 5912),
    OpAliasScopeListDeclINTEL = @as(u32, 5913),
    OpFixedSqrtINTEL = @as(u32, 5923),
    OpFixedRecipINTEL = @as(u32, 5924),
    OpFixedRsqrtINTEL = @as(u32, 5925),
    OpFixedSinINTEL = @as(u32, 5926),
    OpFixedCosINTEL = @as(u32, 5927),
    OpFixedSinCosINTEL = @as(u32, 5928),
    OpFixedSinPiINTEL = @as(u32, 5929),
    OpFixedCosPiINTEL = @as(u32, 5930),
    OpFixedSinCosPiINTEL = @as(u32, 5931),
    OpFixedLogINTEL = @as(u32, 5932),
    OpFixedExpINTEL = @as(u32, 5933),
    OpPtrCastToCrossWorkgroupINTEL = @as(u32, 5934),
    OpCrossWorkgroupCastToPtrINTEL = @as(u32, 5938),
    OpReadPipeBlockingINTEL = @as(u32, 5946),
    OpWritePipeBlockingINTEL = @as(u32, 5947),
    OpFPGARegINTEL = @as(u32, 5949),
    OpRayQueryGetRayTMinKHR = @as(u32, 6016),
    OpRayQueryGetRayFlagsKHR = @as(u32, 6017),
    OpRayQueryGetIntersectionTKHR = @as(u32, 6018),
    OpRayQueryGetIntersectionInstanceCustomIndexKHR = @as(u32, 6019),
    OpRayQueryGetIntersectionInstanceIdKHR = @as(u32, 6020),
    OpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR = @as(u32, 6021),
    OpRayQueryGetIntersectionGeometryIndexKHR = @as(u32, 6022),
    OpRayQueryGetIntersectionPrimitiveIndexKHR = @as(u32, 6023),
    OpRayQueryGetIntersectionBarycentricsKHR = @as(u32, 6024),
    OpRayQueryGetIntersectionFrontFaceKHR = @as(u32, 6025),
    OpRayQueryGetIntersectionCandidateAABBOpaqueKHR = @as(u32, 6026),
    OpRayQueryGetIntersectionObjectRayDirectionKHR = @as(u32, 6027),
    OpRayQueryGetIntersectionObjectRayOriginKHR = @as(u32, 6028),
    OpRayQueryGetWorldRayDirectionKHR = @as(u32, 6029),
    OpRayQueryGetWorldRayOriginKHR = @as(u32, 6030),
    OpRayQueryGetIntersectionObjectToWorldKHR = @as(u32, 6031),
    OpRayQueryGetIntersectionWorldToObjectKHR = @as(u32, 6032),
    OpAtomicFAddEXT = @as(u32, 6035),
    OpTypeBufferSurfaceINTEL = @as(u32, 6086),
    OpTypeStructContinuedINTEL = @as(u32, 6090),
    OpConstantCompositeContinuedINTEL = @as(u32, 6091),
    OpSpecConstantCompositeContinuedINTEL = @as(u32, 6092),
    OpCompositeConstructContinuedINTEL = @as(u32, 6096),
    OpConvertFToBF16INTEL = @as(u32, 6116),
    OpConvertBF16ToFINTEL = @as(u32, 6117),
    OpControlBarrierArriveINTEL = @as(u32, 6142),
    OpControlBarrierWaitINTEL = @as(u32, 6143),
    OpGroupIMulKHR = @as(u32, 6401),
    OpGroupFMulKHR = @as(u32, 6402),
    OpGroupBitwiseAndKHR = @as(u32, 6403),
    OpGroupBitwiseOrKHR = @as(u32, 6404),
    OpGroupBitwiseXorKHR = @as(u32, 6405),
    OpGroupLogicalAndKHR = @as(u32, 6406),
    OpGroupLogicalOrKHR = @as(u32, 6407),
    OpGroupLogicalXorKHR = @as(u32, 6408),
    OpMaskedGatherINTEL = @as(u32, 6428),
    OpMaskedScatterINTEL = @as(u32, 6429),
};

pub const OperandType = enum {
    result_type_id,
    result_id,
    id_ref,
    other,
};

pub const InstructionInfo = struct {
    operands: []const OperandType,
};

pub fn getInstructionInfo(op: Op) InstructionInfo {
    return switch (op) {
        .OpNop => .{ .operands = &[_]OperandType{  } },
        .OpUndef => .{ .operands = &[_]OperandType{ .result_type_id, .result_id } },
        .OpSourceContinued => .{ .operands = &[_]OperandType{ .other } },
        .OpSource => .{ .operands = &[_]OperandType{ .other, .other, .id_ref, .other } },
        .OpSourceExtension => .{ .operands = &[_]OperandType{ .other } },
        .OpName => .{ .operands = &[_]OperandType{ .id_ref, .other } },
        .OpMemberName => .{ .operands = &[_]OperandType{ .id_ref, .other, .other } },
        .OpString => .{ .operands = &[_]OperandType{ .result_id, .other } },
        .OpLine => .{ .operands = &[_]OperandType{ .id_ref, .other, .other } },
        .OpExtension => .{ .operands = &[_]OperandType{ .other } },
        .OpExtInstImport => .{ .operands = &[_]OperandType{ .result_id, .other } },
        .OpExtInst => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .id_ref } },
        .OpMemoryModel => .{ .operands = &[_]OperandType{ .other, .other } },
        .OpEntryPoint => .{ .operands = &[_]OperandType{ .other, .id_ref, .other, .id_ref } },
        .OpExecutionMode => .{ .operands = &[_]OperandType{ .id_ref, .other } },
        .OpCapability => .{ .operands = &[_]OperandType{ .other } },
        .OpTypeVoid => .{ .operands = &[_]OperandType{ .result_id } },
        .OpTypeBool => .{ .operands = &[_]OperandType{ .result_id } },
        .OpTypeInt => .{ .operands = &[_]OperandType{ .result_id, .other, .other } },
        .OpTypeFloat => .{ .operands = &[_]OperandType{ .result_id, .other, .other } },
        .OpTypeVector => .{ .operands = &[_]OperandType{ .result_id, .id_ref, .other } },
        .OpTypeMatrix => .{ .operands = &[_]OperandType{ .result_id, .id_ref, .other } },
        .OpTypeImage => .{ .operands = &[_]OperandType{ .result_id, .id_ref, .other, .other, .other, .other, .other, .other, .other } },
        .OpTypeSampler => .{ .operands = &[_]OperandType{ .result_id } },
        .OpTypeSampledImage => .{ .operands = &[_]OperandType{ .result_id, .id_ref } },
        .OpTypeArray => .{ .operands = &[_]OperandType{ .result_id, .id_ref, .id_ref } },
        .OpTypeRuntimeArray => .{ .operands = &[_]OperandType{ .result_id, .id_ref } },
        .OpTypeStruct => .{ .operands = &[_]OperandType{ .result_id, .id_ref } },
        .OpTypeOpaque => .{ .operands = &[_]OperandType{ .result_id, .other } },
        .OpTypePointer => .{ .operands = &[_]OperandType{ .result_id, .other, .id_ref } },
        .OpTypeFunction => .{ .operands = &[_]OperandType{ .result_id, .id_ref, .id_ref } },
        .OpTypeEvent => .{ .operands = &[_]OperandType{ .result_id } },
        .OpTypeDeviceEvent => .{ .operands = &[_]OperandType{ .result_id } },
        .OpTypeReserveId => .{ .operands = &[_]OperandType{ .result_id } },
        .OpTypeQueue => .{ .operands = &[_]OperandType{ .result_id } },
        .OpTypePipe => .{ .operands = &[_]OperandType{ .result_id, .other } },
        .OpTypeForwardPointer => .{ .operands = &[_]OperandType{ .id_ref, .other } },
        .OpConstantTrue => .{ .operands = &[_]OperandType{ .result_type_id, .result_id } },
        .OpConstantFalse => .{ .operands = &[_]OperandType{ .result_type_id, .result_id } },
        .OpConstant => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other } },
        .OpConstantComposite => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpConstantSampler => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .other } },
        .OpConstantNull => .{ .operands = &[_]OperandType{ .result_type_id, .result_id } },
        .OpSpecConstantTrue => .{ .operands = &[_]OperandType{ .result_type_id, .result_id } },
        .OpSpecConstantFalse => .{ .operands = &[_]OperandType{ .result_type_id, .result_id } },
        .OpSpecConstant => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other } },
        .OpSpecConstantComposite => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSpecConstantOp => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other } },
        .OpFunction => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .id_ref } },
        .OpFunctionParameter => .{ .operands = &[_]OperandType{ .result_type_id, .result_id } },
        .OpFunctionEnd => .{ .operands = &[_]OperandType{  } },
        .OpFunctionCall => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpVariable => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .id_ref } },
        .OpImageTexelPointer => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref } },
        .OpLoad => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other } },
        .OpStore => .{ .operands = &[_]OperandType{ .id_ref, .id_ref, .other } },
        .OpCopyMemory => .{ .operands = &[_]OperandType{ .id_ref, .id_ref, .other, .other } },
        .OpCopyMemorySized => .{ .operands = &[_]OperandType{ .id_ref, .id_ref, .id_ref, .other, .other } },
        .OpAccessChain => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpInBoundsAccessChain => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpPtrAccessChain => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref } },
        .OpArrayLength => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other } },
        .OpGenericPtrMemSemantics => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpInBoundsPtrAccessChain => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref } },
        .OpDecorate => .{ .operands = &[_]OperandType{ .id_ref, .other } },
        .OpMemberDecorate => .{ .operands = &[_]OperandType{ .id_ref, .other, .other } },
        .OpDecorationGroup => .{ .operands = &[_]OperandType{ .result_id } },
        .OpGroupDecorate => .{ .operands = &[_]OperandType{ .id_ref, .id_ref } },
        .OpGroupMemberDecorate => .{ .operands = &[_]OperandType{ .id_ref, .other } },
        .OpVectorExtractDynamic => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpVectorInsertDynamic => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref } },
        .OpVectorShuffle => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .other } },
        .OpCompositeConstruct => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpCompositeExtract => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other } },
        .OpCompositeInsert => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .other } },
        .OpCopyObject => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpTranspose => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSampledImage => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpImageSampleImplicitLod => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .other } },
        .OpImageSampleExplicitLod => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .other } },
        .OpImageSampleDrefImplicitLod => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .other } },
        .OpImageSampleDrefExplicitLod => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .other } },
        .OpImageSampleProjImplicitLod => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .other } },
        .OpImageSampleProjExplicitLod => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .other } },
        .OpImageSampleProjDrefImplicitLod => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .other } },
        .OpImageSampleProjDrefExplicitLod => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .other } },
        .OpImageFetch => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .other } },
        .OpImageGather => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .other } },
        .OpImageDrefGather => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .other } },
        .OpImageRead => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .other } },
        .OpImageWrite => .{ .operands = &[_]OperandType{ .id_ref, .id_ref, .id_ref, .other } },
        .OpImage => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpImageQueryFormat => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpImageQueryOrder => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpImageQuerySizeLod => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpImageQuerySize => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpImageQueryLod => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpImageQueryLevels => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpImageQuerySamples => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpConvertFToU => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpConvertFToS => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpConvertSToF => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpConvertUToF => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpUConvert => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSConvert => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpFConvert => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpQuantizeToF16 => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpConvertPtrToU => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSatConvertSToU => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSatConvertUToS => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpConvertUToPtr => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpPtrCastToGeneric => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpGenericCastToPtr => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpGenericCastToPtrExplicit => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other } },
        .OpBitcast => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSNegate => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpFNegate => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpIAdd => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpFAdd => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpISub => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpFSub => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpIMul => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpFMul => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpUDiv => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpSDiv => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpFDiv => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpUMod => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpSRem => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpSMod => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpFRem => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpFMod => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpVectorTimesScalar => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpMatrixTimesScalar => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpVectorTimesMatrix => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpMatrixTimesVector => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpMatrixTimesMatrix => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpOuterProduct => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpDot => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpIAddCarry => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpISubBorrow => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpUMulExtended => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpSMulExtended => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpAny => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpAll => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpIsNan => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpIsInf => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpIsFinite => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpIsNormal => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSignBitSet => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpLessOrGreater => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpOrdered => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpUnordered => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpLogicalEqual => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpLogicalNotEqual => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpLogicalOr => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpLogicalAnd => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpLogicalNot => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSelect => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref } },
        .OpIEqual => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpINotEqual => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpUGreaterThan => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpSGreaterThan => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpUGreaterThanEqual => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpSGreaterThanEqual => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpULessThan => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpSLessThan => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpULessThanEqual => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpSLessThanEqual => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpFOrdEqual => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpFUnordEqual => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpFOrdNotEqual => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpFUnordNotEqual => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpFOrdLessThan => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpFUnordLessThan => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpFOrdGreaterThan => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpFUnordGreaterThan => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpFOrdLessThanEqual => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpFUnordLessThanEqual => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpFOrdGreaterThanEqual => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpFUnordGreaterThanEqual => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpShiftRightLogical => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpShiftRightArithmetic => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpShiftLeftLogical => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpBitwiseOr => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpBitwiseXor => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpBitwiseAnd => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpNot => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpBitFieldInsert => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpBitFieldSExtract => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref } },
        .OpBitFieldUExtract => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref } },
        .OpBitReverse => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpBitCount => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpDPdx => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpDPdy => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpFwidth => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpDPdxFine => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpDPdyFine => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpFwidthFine => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpDPdxCoarse => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpDPdyCoarse => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpFwidthCoarse => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpEmitVertex => .{ .operands = &[_]OperandType{  } },
        .OpEndPrimitive => .{ .operands = &[_]OperandType{  } },
        .OpEmitStreamVertex => .{ .operands = &[_]OperandType{ .id_ref } },
        .OpEndStreamPrimitive => .{ .operands = &[_]OperandType{ .id_ref } },
        .OpControlBarrier => .{ .operands = &[_]OperandType{ .other, .other, .other } },
        .OpMemoryBarrier => .{ .operands = &[_]OperandType{ .other, .other } },
        .OpAtomicLoad => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other } },
        .OpAtomicStore => .{ .operands = &[_]OperandType{ .id_ref, .other, .other, .id_ref } },
        .OpAtomicExchange => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .id_ref } },
        .OpAtomicCompareExchange => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .other, .id_ref, .id_ref } },
        .OpAtomicCompareExchangeWeak => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .other, .id_ref, .id_ref } },
        .OpAtomicIIncrement => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other } },
        .OpAtomicIDecrement => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other } },
        .OpAtomicIAdd => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .id_ref } },
        .OpAtomicISub => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .id_ref } },
        .OpAtomicSMin => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .id_ref } },
        .OpAtomicUMin => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .id_ref } },
        .OpAtomicSMax => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .id_ref } },
        .OpAtomicUMax => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .id_ref } },
        .OpAtomicAnd => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .id_ref } },
        .OpAtomicOr => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .id_ref } },
        .OpAtomicXor => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .id_ref } },
        .OpPhi => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other } },
        .OpLoopMerge => .{ .operands = &[_]OperandType{ .id_ref, .id_ref, .other } },
        .OpSelectionMerge => .{ .operands = &[_]OperandType{ .id_ref, .other } },
        .OpLabel => .{ .operands = &[_]OperandType{ .result_id } },
        .OpBranch => .{ .operands = &[_]OperandType{ .id_ref } },
        .OpBranchConditional => .{ .operands = &[_]OperandType{ .id_ref, .id_ref, .id_ref, .other } },
        .OpSwitch => .{ .operands = &[_]OperandType{ .id_ref, .id_ref, .other } },
        .OpKill => .{ .operands = &[_]OperandType{  } },
        .OpReturn => .{ .operands = &[_]OperandType{  } },
        .OpReturnValue => .{ .operands = &[_]OperandType{ .id_ref } },
        .OpUnreachable => .{ .operands = &[_]OperandType{  } },
        .OpLifetimeStart => .{ .operands = &[_]OperandType{ .id_ref, .other } },
        .OpLifetimeStop => .{ .operands = &[_]OperandType{ .id_ref, .other } },
        .OpGroupAsyncCopy => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpGroupWaitEvents => .{ .operands = &[_]OperandType{ .other, .id_ref, .id_ref } },
        .OpGroupAll => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .id_ref } },
        .OpGroupAny => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .id_ref } },
        .OpGroupBroadcast => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .id_ref, .id_ref } },
        .OpGroupIAdd => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref } },
        .OpGroupFAdd => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref } },
        .OpGroupFMin => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref } },
        .OpGroupUMin => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref } },
        .OpGroupSMin => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref } },
        .OpGroupFMax => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref } },
        .OpGroupUMax => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref } },
        .OpGroupSMax => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref } },
        .OpReadPipe => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpWritePipe => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpReservedReadPipe => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpReservedWritePipe => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpReserveReadPipePackets => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpReserveWritePipePackets => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpCommitReadPipe => .{ .operands = &[_]OperandType{ .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpCommitWritePipe => .{ .operands = &[_]OperandType{ .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpIsValidReserveId => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpGetNumPipePackets => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref } },
        .OpGetMaxPipePackets => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref } },
        .OpGroupReserveReadPipePackets => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpGroupReserveWritePipePackets => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpGroupCommitReadPipe => .{ .operands = &[_]OperandType{ .other, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpGroupCommitWritePipe => .{ .operands = &[_]OperandType{ .other, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpEnqueueMarker => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpEnqueueKernel => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpGetKernelNDrangeSubGroupCount => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpGetKernelNDrangeMaxSubGroupSize => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpGetKernelWorkGroupSize => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpGetKernelPreferredWorkGroupSizeMultiple => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpRetainEvent => .{ .operands = &[_]OperandType{ .id_ref } },
        .OpReleaseEvent => .{ .operands = &[_]OperandType{ .id_ref } },
        .OpCreateUserEvent => .{ .operands = &[_]OperandType{ .result_type_id, .result_id } },
        .OpIsValidEvent => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSetUserEventStatus => .{ .operands = &[_]OperandType{ .id_ref, .id_ref } },
        .OpCaptureEventProfilingInfo => .{ .operands = &[_]OperandType{ .id_ref, .id_ref, .id_ref } },
        .OpGetDefaultQueue => .{ .operands = &[_]OperandType{ .result_type_id, .result_id } },
        .OpBuildNDRange => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref } },
        .OpImageSparseSampleImplicitLod => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .other } },
        .OpImageSparseSampleExplicitLod => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .other } },
        .OpImageSparseSampleDrefImplicitLod => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .other } },
        .OpImageSparseSampleDrefExplicitLod => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .other } },
        .OpImageSparseSampleProjImplicitLod => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .other } },
        .OpImageSparseSampleProjExplicitLod => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .other } },
        .OpImageSparseSampleProjDrefImplicitLod => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .other } },
        .OpImageSparseSampleProjDrefExplicitLod => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .other } },
        .OpImageSparseFetch => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .other } },
        .OpImageSparseGather => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .other } },
        .OpImageSparseDrefGather => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .other } },
        .OpImageSparseTexelsResident => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpNoLine => .{ .operands = &[_]OperandType{  } },
        .OpAtomicFlagTestAndSet => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other } },
        .OpAtomicFlagClear => .{ .operands = &[_]OperandType{ .id_ref, .other, .other } },
        .OpImageSparseRead => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .other } },
        .OpSizeOf => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpTypePipeStorage => .{ .operands = &[_]OperandType{ .result_id } },
        .OpConstantPipeStorage => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .other } },
        .OpCreatePipeFromPipeStorage => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpGetKernelLocalSizeForSubgroupCount => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpGetKernelMaxNumSubgroups => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpTypeNamedBarrier => .{ .operands = &[_]OperandType{ .result_id } },
        .OpNamedBarrierInitialize => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpMemoryNamedBarrier => .{ .operands = &[_]OperandType{ .id_ref, .other, .other } },
        .OpModuleProcessed => .{ .operands = &[_]OperandType{ .other } },
        .OpExecutionModeId => .{ .operands = &[_]OperandType{ .id_ref, .other } },
        .OpDecorateId => .{ .operands = &[_]OperandType{ .id_ref, .other } },
        .OpGroupNonUniformElect => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other } },
        .OpGroupNonUniformAll => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .id_ref } },
        .OpGroupNonUniformAny => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .id_ref } },
        .OpGroupNonUniformAllEqual => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .id_ref } },
        .OpGroupNonUniformBroadcast => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .id_ref, .id_ref } },
        .OpGroupNonUniformBroadcastFirst => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .id_ref } },
        .OpGroupNonUniformBallot => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .id_ref } },
        .OpGroupNonUniformInverseBallot => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .id_ref } },
        .OpGroupNonUniformBallotBitExtract => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .id_ref, .id_ref } },
        .OpGroupNonUniformBallotBitCount => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref } },
        .OpGroupNonUniformBallotFindLSB => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .id_ref } },
        .OpGroupNonUniformBallotFindMSB => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .id_ref } },
        .OpGroupNonUniformShuffle => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .id_ref, .id_ref } },
        .OpGroupNonUniformShuffleXor => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .id_ref, .id_ref } },
        .OpGroupNonUniformShuffleUp => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .id_ref, .id_ref } },
        .OpGroupNonUniformShuffleDown => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .id_ref, .id_ref } },
        .OpGroupNonUniformIAdd => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref, .id_ref } },
        .OpGroupNonUniformFAdd => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref, .id_ref } },
        .OpGroupNonUniformIMul => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref, .id_ref } },
        .OpGroupNonUniformFMul => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref, .id_ref } },
        .OpGroupNonUniformSMin => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref, .id_ref } },
        .OpGroupNonUniformUMin => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref, .id_ref } },
        .OpGroupNonUniformFMin => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref, .id_ref } },
        .OpGroupNonUniformSMax => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref, .id_ref } },
        .OpGroupNonUniformUMax => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref, .id_ref } },
        .OpGroupNonUniformFMax => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref, .id_ref } },
        .OpGroupNonUniformBitwiseAnd => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref, .id_ref } },
        .OpGroupNonUniformBitwiseOr => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref, .id_ref } },
        .OpGroupNonUniformBitwiseXor => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref, .id_ref } },
        .OpGroupNonUniformLogicalAnd => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref, .id_ref } },
        .OpGroupNonUniformLogicalOr => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref, .id_ref } },
        .OpGroupNonUniformLogicalXor => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref, .id_ref } },
        .OpGroupNonUniformQuadBroadcast => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .id_ref, .id_ref } },
        .OpGroupNonUniformQuadSwap => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .id_ref, .id_ref } },
        .OpCopyLogical => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpPtrEqual => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpPtrNotEqual => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpPtrDiff => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpColorAttachmentReadEXT => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpDepthAttachmentReadEXT => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpStencilAttachmentReadEXT => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpTerminateInvocation => .{ .operands = &[_]OperandType{  } },
        .OpSubgroupBallotKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupFirstInvocationKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAllKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAnyKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAllEqualKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpGroupNonUniformRotateKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .id_ref, .id_ref, .id_ref } },
        .OpSubgroupReadInvocationKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpExtInstWithForwardRefsKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .id_ref } },
        .OpTraceRayKHR => .{ .operands = &[_]OperandType{ .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpExecuteCallableKHR => .{ .operands = &[_]OperandType{ .id_ref, .id_ref } },
        .OpConvertUToAccelerationStructureKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpIgnoreIntersectionKHR => .{ .operands = &[_]OperandType{  } },
        .OpTerminateRayKHR => .{ .operands = &[_]OperandType{  } },
        .OpSDot => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .other } },
        .OpUDot => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .other } },
        .OpSUDot => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .other } },
        .OpSDotAccSat => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .other } },
        .OpUDotAccSat => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .other } },
        .OpSUDotAccSat => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .other } },
        .OpTypeCooperativeMatrixKHR => .{ .operands = &[_]OperandType{ .result_id, .id_ref, .other, .id_ref, .id_ref, .id_ref } },
        .OpCooperativeMatrixLoadKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .other } },
        .OpCooperativeMatrixStoreKHR => .{ .operands = &[_]OperandType{ .id_ref, .id_ref, .id_ref, .id_ref, .other } },
        .OpCooperativeMatrixMulAddKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .other } },
        .OpCooperativeMatrixLengthKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpConstantCompositeReplicateEXT => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSpecConstantCompositeReplicateEXT => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpCompositeConstructReplicateEXT => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpTypeRayQueryKHR => .{ .operands = &[_]OperandType{ .result_id } },
        .OpRayQueryInitializeKHR => .{ .operands = &[_]OperandType{ .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpRayQueryTerminateKHR => .{ .operands = &[_]OperandType{ .id_ref } },
        .OpRayQueryGenerateIntersectionKHR => .{ .operands = &[_]OperandType{ .id_ref, .id_ref } },
        .OpRayQueryConfirmIntersectionKHR => .{ .operands = &[_]OperandType{ .id_ref } },
        .OpRayQueryProceedKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpRayQueryGetIntersectionTypeKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpImageSampleWeightedQCOM => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref } },
        .OpImageBoxFilterQCOM => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref } },
        .OpImageBlockMatchSSDQCOM => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpImageBlockMatchSADQCOM => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpImageBlockMatchWindowSSDQCOM => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpImageBlockMatchWindowSADQCOM => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpImageBlockMatchGatherSSDQCOM => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpImageBlockMatchGatherSADQCOM => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpGroupIAddNonUniformAMD => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref } },
        .OpGroupFAddNonUniformAMD => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref } },
        .OpGroupFMinNonUniformAMD => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref } },
        .OpGroupUMinNonUniformAMD => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref } },
        .OpGroupSMinNonUniformAMD => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref } },
        .OpGroupFMaxNonUniformAMD => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref } },
        .OpGroupUMaxNonUniformAMD => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref } },
        .OpGroupSMaxNonUniformAMD => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref } },
        .OpFragmentMaskFetchAMD => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpFragmentFetchAMD => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref } },
        .OpReadClockKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other } },
        .OpFinalizeNodePayloadsAMDX => .{ .operands = &[_]OperandType{ .id_ref } },
        .OpFinishWritingNodePayloadAMDX => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpInitializeNodePayloadsAMDX => .{ .operands = &[_]OperandType{ .id_ref, .other, .id_ref, .id_ref } },
        .OpGroupNonUniformQuadAllKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpGroupNonUniformQuadAnyKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpHitObjectRecordHitMotionNV => .{ .operands = &[_]OperandType{ .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpHitObjectRecordHitWithIndexMotionNV => .{ .operands = &[_]OperandType{ .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpHitObjectRecordMissMotionNV => .{ .operands = &[_]OperandType{ .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpHitObjectGetWorldToObjectNV => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpHitObjectGetObjectToWorldNV => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpHitObjectGetObjectRayDirectionNV => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpHitObjectGetObjectRayOriginNV => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpHitObjectTraceRayMotionNV => .{ .operands = &[_]OperandType{ .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpHitObjectGetShaderRecordBufferHandleNV => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpHitObjectGetShaderBindingTableRecordIndexNV => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpHitObjectRecordEmptyNV => .{ .operands = &[_]OperandType{ .id_ref } },
        .OpHitObjectTraceRayNV => .{ .operands = &[_]OperandType{ .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpHitObjectRecordHitNV => .{ .operands = &[_]OperandType{ .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpHitObjectRecordHitWithIndexNV => .{ .operands = &[_]OperandType{ .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpHitObjectRecordMissNV => .{ .operands = &[_]OperandType{ .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpHitObjectExecuteShaderNV => .{ .operands = &[_]OperandType{ .id_ref, .id_ref } },
        .OpHitObjectGetCurrentTimeNV => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpHitObjectGetAttributesNV => .{ .operands = &[_]OperandType{ .id_ref, .id_ref } },
        .OpHitObjectGetHitKindNV => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpHitObjectGetPrimitiveIndexNV => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpHitObjectGetGeometryIndexNV => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpHitObjectGetInstanceIdNV => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpHitObjectGetInstanceCustomIndexNV => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpHitObjectGetWorldRayDirectionNV => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpHitObjectGetWorldRayOriginNV => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpHitObjectGetRayTMaxNV => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpHitObjectGetRayTMinNV => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpHitObjectIsEmptyNV => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpHitObjectIsHitNV => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpHitObjectIsMissNV => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpReorderThreadWithHitObjectNV => .{ .operands = &[_]OperandType{ .id_ref, .id_ref, .id_ref } },
        .OpReorderThreadWithHintNV => .{ .operands = &[_]OperandType{ .id_ref, .id_ref } },
        .OpTypeHitObjectNV => .{ .operands = &[_]OperandType{ .result_id } },
        .OpImageSampleFootprintNV => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref, .other } },
        .OpEmitMeshTasksEXT => .{ .operands = &[_]OperandType{ .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpSetMeshOutputsEXT => .{ .operands = &[_]OperandType{ .id_ref, .id_ref } },
        .OpGroupNonUniformPartitionNV => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpWritePackedPrimitiveIndices4x8NV => .{ .operands = &[_]OperandType{ .id_ref, .id_ref } },
        .OpFetchMicroTriangleVertexPositionNV => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpFetchMicroTriangleVertexBarycentricNV => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpReportIntersectionKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpIgnoreIntersectionNV => .{ .operands = &[_]OperandType{  } },
        .OpTerminateRayNV => .{ .operands = &[_]OperandType{  } },
        .OpTraceNV => .{ .operands = &[_]OperandType{ .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpTraceMotionNV => .{ .operands = &[_]OperandType{ .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpTraceRayMotionNV => .{ .operands = &[_]OperandType{ .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpRayQueryGetIntersectionTriangleVertexPositionsKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpTypeAccelerationStructureKHR => .{ .operands = &[_]OperandType{ .result_id } },
        .OpExecuteCallableNV => .{ .operands = &[_]OperandType{ .id_ref, .id_ref } },
        .OpTypeCooperativeMatrixNV => .{ .operands = &[_]OperandType{ .result_id, .id_ref, .other, .id_ref, .id_ref } },
        .OpCooperativeMatrixLoadNV => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .other } },
        .OpCooperativeMatrixStoreNV => .{ .operands = &[_]OperandType{ .id_ref, .id_ref, .id_ref, .id_ref, .other } },
        .OpCooperativeMatrixMulAddNV => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref } },
        .OpCooperativeMatrixLengthNV => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpBeginInvocationInterlockEXT => .{ .operands = &[_]OperandType{  } },
        .OpEndInvocationInterlockEXT => .{ .operands = &[_]OperandType{  } },
        .OpDemoteToHelperInvocation => .{ .operands = &[_]OperandType{  } },
        .OpIsHelperInvocationEXT => .{ .operands = &[_]OperandType{ .result_type_id, .result_id } },
        .OpConvertUToImageNV => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpConvertUToSamplerNV => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpConvertImageToUNV => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpConvertSamplerToUNV => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpConvertUToSampledImageNV => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpConvertSampledImageToUNV => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSamplerImageAddressingModeNV => .{ .operands = &[_]OperandType{ .other } },
        .OpRawAccessChainNV => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref, .other } },
        .OpSubgroupShuffleINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpSubgroupShuffleDownINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref } },
        .OpSubgroupShuffleUpINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref } },
        .OpSubgroupShuffleXorINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpSubgroupBlockReadINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupBlockWriteINTEL => .{ .operands = &[_]OperandType{ .id_ref, .id_ref } },
        .OpSubgroupImageBlockReadINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpSubgroupImageBlockWriteINTEL => .{ .operands = &[_]OperandType{ .id_ref, .id_ref, .id_ref } },
        .OpSubgroupImageMediaBlockReadINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpSubgroupImageMediaBlockWriteINTEL => .{ .operands = &[_]OperandType{ .id_ref, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpUCountLeadingZerosINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpUCountTrailingZerosINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpAbsISubINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpAbsUSubINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpIAddSatINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpUAddSatINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpIAverageINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpUAverageINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpIAverageRoundedINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpUAverageRoundedINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpISubSatINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpUSubSatINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpIMul32x16INTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpUMul32x16INTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpConstantFunctionPointerINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpFunctionPointerCallINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpAsmTargetINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other } },
        .OpAsmINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .other, .other } },
        .OpAsmCallINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpAtomicFMinEXT => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .id_ref } },
        .OpAtomicFMaxEXT => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .id_ref } },
        .OpAssumeTrueKHR => .{ .operands = &[_]OperandType{ .id_ref } },
        .OpExpectKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpDecorateString => .{ .operands = &[_]OperandType{ .id_ref, .other } },
        .OpMemberDecorateString => .{ .operands = &[_]OperandType{ .id_ref, .other, .other } },
        .OpVmeImageINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpTypeVmeImageINTEL => .{ .operands = &[_]OperandType{ .result_id, .id_ref } },
        .OpTypeAvcImePayloadINTEL => .{ .operands = &[_]OperandType{ .result_id } },
        .OpTypeAvcRefPayloadINTEL => .{ .operands = &[_]OperandType{ .result_id } },
        .OpTypeAvcSicPayloadINTEL => .{ .operands = &[_]OperandType{ .result_id } },
        .OpTypeAvcMcePayloadINTEL => .{ .operands = &[_]OperandType{ .result_id } },
        .OpTypeAvcMceResultINTEL => .{ .operands = &[_]OperandType{ .result_id } },
        .OpTypeAvcImeResultINTEL => .{ .operands = &[_]OperandType{ .result_id } },
        .OpTypeAvcImeResultSingleReferenceStreamoutINTEL => .{ .operands = &[_]OperandType{ .result_id } },
        .OpTypeAvcImeResultDualReferenceStreamoutINTEL => .{ .operands = &[_]OperandType{ .result_id } },
        .OpTypeAvcImeSingleReferenceStreaminINTEL => .{ .operands = &[_]OperandType{ .result_id } },
        .OpTypeAvcImeDualReferenceStreaminINTEL => .{ .operands = &[_]OperandType{ .result_id } },
        .OpTypeAvcRefResultINTEL => .{ .operands = &[_]OperandType{ .result_id } },
        .OpTypeAvcSicResultINTEL => .{ .operands = &[_]OperandType{ .result_id } },
        .OpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpSubgroupAvcMceSetInterShapePenaltyINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpSubgroupAvcMceSetInterDirectionPenaltyINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id } },
        .OpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id } },
        .OpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id } },
        .OpSubgroupAvcMceSetMotionVectorCostFunctionINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id } },
        .OpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id } },
        .OpSubgroupAvcMceSetAcOnlyHaarINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref } },
        .OpSubgroupAvcMceConvertToImePayloadINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcMceConvertToImeResultINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcMceConvertToRefPayloadINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcMceConvertToRefResultINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcMceConvertToSicPayloadINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcMceConvertToSicResultINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcMceGetMotionVectorsINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcMceGetInterDistortionsINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcMceGetBestInterDistortionsINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcMceGetInterMajorShapeINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcMceGetInterMinorShapeINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcMceGetInterDirectionsINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcMceGetInterMotionVectorCountINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcMceGetInterReferenceIdsINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref } },
        .OpSubgroupAvcImeInitializeINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref } },
        .OpSubgroupAvcImeSetSingleReferenceINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref } },
        .OpSubgroupAvcImeSetDualReferenceINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpSubgroupAvcImeRefWindowSizeINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpSubgroupAvcImeAdjustRefOffsetINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpSubgroupAvcImeConvertToMcePayloadINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcImeSetMaxMotionVectorCountINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpSubgroupAvcImeSetUnidirectionalMixDisableINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpSubgroupAvcImeSetWeightedSadINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpSubgroupAvcImeEvaluateWithSingleReferenceINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref } },
        .OpSubgroupAvcImeEvaluateWithDualReferenceINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref } },
        .OpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpSubgroupAvcImeConvertToMceResultINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcImeGetSingleReferenceStreaminINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcImeGetDualReferenceStreaminINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcImeStripSingleReferenceStreamoutINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcImeStripDualReferenceStreamoutINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref } },
        .OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref } },
        .OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref } },
        .OpSubgroupAvcImeGetBorderReachedINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpSubgroupAvcImeGetTruncatedSearchIndicationINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcFmeInitializeINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpSubgroupAvcBmeInitializeINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpSubgroupAvcRefConvertToMcePayloadINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcRefSetBidirectionalMixDisableINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcRefSetBilinearFilterEnableINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcRefEvaluateWithSingleReferenceINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref } },
        .OpSubgroupAvcRefEvaluateWithDualReferenceINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpSubgroupAvcRefEvaluateWithMultiReferenceINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref } },
        .OpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpSubgroupAvcRefConvertToMceResultINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcSicInitializeINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcSicConfigureSkcINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpSubgroupAvcSicConfigureIpeLumaINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpSubgroupAvcSicConfigureIpeLumaChromaINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpSubgroupAvcSicGetMotionVectorMaskINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpSubgroupAvcSicConvertToMcePayloadINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpSubgroupAvcSicSetBilinearFilterEnableINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcSicSetSkcForwardTransformEnableINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpSubgroupAvcSicEvaluateIpeINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpSubgroupAvcSicEvaluateWithSingleReferenceINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref } },
        .OpSubgroupAvcSicEvaluateWithDualReferenceINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpSubgroupAvcSicEvaluateWithMultiReferenceINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref } },
        .OpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .id_ref, .id_ref } },
        .OpSubgroupAvcSicConvertToMceResultINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcSicGetIpeLumaShapeINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcSicGetBestIpeLumaDistortionINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcSicGetBestIpeChromaDistortionINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcSicGetPackedIpeLumaModesINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcSicGetIpeChromaModeINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSubgroupAvcSicGetInterRawSadsINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpVariableLengthArrayINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpSaveMemoryINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id } },
        .OpRestoreMemoryINTEL => .{ .operands = &[_]OperandType{ .id_ref } },
        .OpArbitraryFloatSinCosPiINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .other, .other, .other, .other } },
        .OpArbitraryFloatCastINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .other, .other, .other } },
        .OpArbitraryFloatCastFromIntINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .other, .other, .other } },
        .OpArbitraryFloatCastToIntINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .other, .other } },
        .OpArbitraryFloatAddINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .id_ref, .other, .other, .other, .other, .other } },
        .OpArbitraryFloatSubINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .id_ref, .other, .other, .other, .other, .other } },
        .OpArbitraryFloatMulINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .id_ref, .other, .other, .other, .other, .other } },
        .OpArbitraryFloatDivINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .id_ref, .other, .other, .other, .other, .other } },
        .OpArbitraryFloatGTINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .id_ref, .other } },
        .OpArbitraryFloatGEINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .id_ref, .other } },
        .OpArbitraryFloatLTINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .id_ref, .other } },
        .OpArbitraryFloatLEINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .id_ref, .other } },
        .OpArbitraryFloatEQINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .id_ref, .other } },
        .OpArbitraryFloatRecipINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .other, .other, .other } },
        .OpArbitraryFloatRSqrtINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .other, .other, .other } },
        .OpArbitraryFloatCbrtINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .other, .other, .other } },
        .OpArbitraryFloatHypotINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .id_ref, .other, .other, .other, .other, .other } },
        .OpArbitraryFloatSqrtINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .other, .other, .other } },
        .OpArbitraryFloatLogINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .other, .other, .other } },
        .OpArbitraryFloatLog2INTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .other, .other, .other } },
        .OpArbitraryFloatLog10INTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .other, .other, .other } },
        .OpArbitraryFloatLog1pINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .other, .other, .other } },
        .OpArbitraryFloatExpINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .other, .other, .other } },
        .OpArbitraryFloatExp2INTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .other, .other, .other } },
        .OpArbitraryFloatExp10INTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .other, .other, .other } },
        .OpArbitraryFloatExpm1INTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .other, .other, .other } },
        .OpArbitraryFloatSinINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .other, .other, .other } },
        .OpArbitraryFloatCosINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .other, .other, .other } },
        .OpArbitraryFloatSinCosINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .other, .other, .other } },
        .OpArbitraryFloatSinPiINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .other, .other, .other } },
        .OpArbitraryFloatCosPiINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .other, .other, .other } },
        .OpArbitraryFloatASinINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .other, .other, .other } },
        .OpArbitraryFloatASinPiINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .other, .other, .other } },
        .OpArbitraryFloatACosINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .other, .other, .other } },
        .OpArbitraryFloatACosPiINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .other, .other, .other } },
        .OpArbitraryFloatATanINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .other, .other, .other } },
        .OpArbitraryFloatATanPiINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .other, .other, .other } },
        .OpArbitraryFloatATan2INTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .id_ref, .other, .other, .other, .other, .other } },
        .OpArbitraryFloatPowINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .id_ref, .other, .other, .other, .other, .other } },
        .OpArbitraryFloatPowRINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .id_ref, .other, .other, .other, .other, .other } },
        .OpArbitraryFloatPowNINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .id_ref, .other, .other, .other, .other } },
        .OpLoopControlINTEL => .{ .operands = &[_]OperandType{ .other } },
        .OpAliasDomainDeclINTEL => .{ .operands = &[_]OperandType{ .result_id, .id_ref } },
        .OpAliasScopeDeclINTEL => .{ .operands = &[_]OperandType{ .result_id, .id_ref, .id_ref } },
        .OpAliasScopeListDeclINTEL => .{ .operands = &[_]OperandType{ .result_id, .id_ref } },
        .OpFixedSqrtINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .other, .other, .other, .other, .other } },
        .OpFixedRecipINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .other, .other, .other, .other, .other } },
        .OpFixedRsqrtINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .other, .other, .other, .other, .other } },
        .OpFixedSinINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .other, .other, .other, .other, .other } },
        .OpFixedCosINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .other, .other, .other, .other, .other } },
        .OpFixedSinCosINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .other, .other, .other, .other, .other } },
        .OpFixedSinPiINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .other, .other, .other, .other, .other } },
        .OpFixedCosPiINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .other, .other, .other, .other, .other } },
        .OpFixedSinCosPiINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .other, .other, .other, .other, .other } },
        .OpFixedLogINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .other, .other, .other, .other, .other } },
        .OpFixedExpINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref, .other, .other, .other, .other, .other } },
        .OpPtrCastToCrossWorkgroupINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpCrossWorkgroupCastToPtrINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpReadPipeBlockingINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpWritePipeBlockingINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpFPGARegINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpRayQueryGetRayTMinKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpRayQueryGetRayFlagsKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpRayQueryGetIntersectionTKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpRayQueryGetIntersectionInstanceCustomIndexKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpRayQueryGetIntersectionInstanceIdKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpRayQueryGetIntersectionGeometryIndexKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpRayQueryGetIntersectionPrimitiveIndexKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpRayQueryGetIntersectionBarycentricsKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpRayQueryGetIntersectionFrontFaceKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpRayQueryGetIntersectionCandidateAABBOpaqueKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpRayQueryGetIntersectionObjectRayDirectionKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpRayQueryGetIntersectionObjectRayOriginKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpRayQueryGetWorldRayDirectionKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpRayQueryGetWorldRayOriginKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpRayQueryGetIntersectionObjectToWorldKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpRayQueryGetIntersectionWorldToObjectKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .id_ref } },
        .OpAtomicFAddEXT => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .other, .id_ref } },
        .OpTypeBufferSurfaceINTEL => .{ .operands = &[_]OperandType{ .result_id, .other } },
        .OpTypeStructContinuedINTEL => .{ .operands = &[_]OperandType{ .id_ref } },
        .OpConstantCompositeContinuedINTEL => .{ .operands = &[_]OperandType{ .id_ref } },
        .OpSpecConstantCompositeContinuedINTEL => .{ .operands = &[_]OperandType{ .id_ref } },
        .OpCompositeConstructContinuedINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpConvertFToBF16INTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpConvertBF16ToFINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref } },
        .OpControlBarrierArriveINTEL => .{ .operands = &[_]OperandType{ .other, .other, .other } },
        .OpControlBarrierWaitINTEL => .{ .operands = &[_]OperandType{ .other, .other, .other } },
        .OpGroupIMulKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref } },
        .OpGroupFMulKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref } },
        .OpGroupBitwiseAndKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref } },
        .OpGroupBitwiseOrKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref } },
        .OpGroupBitwiseXorKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref } },
        .OpGroupLogicalAndKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref } },
        .OpGroupLogicalOrKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref } },
        .OpGroupLogicalXorKHR => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .other, .other, .id_ref } },
        .OpMaskedGatherINTEL => .{ .operands = &[_]OperandType{ .result_type_id, .result_id, .id_ref, .other, .id_ref, .id_ref } },
        .OpMaskedScatterINTEL => .{ .operands = &[_]OperandType{ .id_ref, .id_ref, .other, .id_ref } },
    };
}
