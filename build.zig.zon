.{
    .name = "spirv-to-pica200",
    // This is a [Semantic Version](https://semver.org/).
    // In a future version of Zig it will be used for package deduplication.
    .version = "0.0.0",

    // This field is optional.
    // This is currently advisory only; Zig does not yet do anything
    // with this value.
    //.minimum_zig_version = "0.11.0",

    // This field is optional.
    // Each dependency must either provide a `url` and `hash`, or a `path`.
    // `zig build --fetch` can be used to fetch all dependencies of a package, recursively.
    // Once all dependencies are fetched, `zig build` no longer requires
    // internet connectivity.
    .dependencies = .{
        //.spirv_tools = .{
        //    .url = "https://github.com/hexops/spirv-tools/archive/4dad52926d917c7e714511af554038e2f7ddfa09.tar.gz",
        //    .hash = "1220b3b094e64cb8d084fa5991fcaa63ce98e8327d9f312bbe1c639dcec1f7fd457f",
        //},
        .zig_json = .{
            .url = "https://github.com/part1zano/zig-json/archive/7ac4633f24b723bd8ebcdfeb0249d365bc8cb9b9.tar.gz",
            .hash = "1220aaba53d38fd5689b6a29e496ab8a262c54ae8a52321e61ed8da9f1d968c69e7e",
        },
    },

    // Specifies the set of files and directories that are included in this package.
    // Only files and directories listed here are included in the `hash` that
    // is computed for this package. Only files listed here will remain on disk
    // when using the zig package manager. As a rule of thumb, one should list
    // files required for compilation plus any license(s).
    // Paths are relative to the build root. Use the empty string (`""`) to refer to
    // the build root itself.
    // A directory listed here means that all files within, recursively, are included.
    .paths = .{
        "build.zig",
        "build.zig.zon",
        "src",
        // For example...
        //"LICENSE",
        //"README.md",
    },
}
